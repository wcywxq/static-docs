{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-volantis/source/css/first.styl","path":"css/first.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-volantis/source/js/aplayer.js","path":"js/aplayer.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-volantis/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-volantis/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-volantis/source/js/issues.js","path":"js/issues.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-volantis/source/js/valine.js","path":"js/valine.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-volantis/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-volantis/source/js/search/azure.js","path":"js/search/azure.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-volantis/source/js/search/baidu.js","path":"js/search/baidu.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-volantis/source/js/search/google.js","path":"js/search/google.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-volantis/source/js/search/hexo.js","path":"js/search/hexo.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1617697214595},{"_id":"source/404.md","hash":"e98e340529aca6f06034991ae3f07002fa4ecdf9","modified":1617698147057},{"_id":"source/tags/index.md","hash":"c611dc2ac446dcc83a01ccd88bc1148bca4fe9cf","modified":1617697958219},{"_id":"source/categories/index.md","hash":"bcbd5f0ff024207da43bd32b4b58cb8998f4db4c","modified":1617697924583},{"_id":"node_modules/hexo-theme-volantis/layout/_cover/blank.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/_config.yml","hash":"f8f1c382ebb5e06d2c5db31ce6603d0b34de057a","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/.eslintrc.json","hash":"3bd7212fee06c72474f08c2ed683c9d662fa314c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/package.json","hash":"c622b265ad1cfce3300d13061ab30fe9d1e058f8","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/languages/en.yml","hash":"5e9e574cda894cb91cc34814f65af69b5adf61f2","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/languages/zh-CN.yml","hash":"656f63749e79618433c128beb3e2e604a6f15bd1","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/languages/zh-TW.yml","hash":"2f45bd80430c545caf578e0ac4eea656c4415b7a","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/404.ejs","hash":"b12fd9790e0683de4de265142d789a4332d6efaf","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_pre.ejs","hash":"11d06fe4072db2a7b3bca20b4af2ec79d127cd06","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/archive.ejs","hash":"3f9282eead2742c006846c9572c76330f628ffe1","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/artitalk.ejs","hash":"35095af0a8aa34409740e5bd61465ace162e9ee4","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/bb.ejs","hash":"aa8b04f4be4c9f664aaaba57e2f38fe0165e55f1","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/category.ejs","hash":"8763a774260ed5b3a49ab99cc8558c70ae364e3f","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/docs.ejs","hash":"f7ff6bf7764269518adf099b6ae60e422b3bcf13","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/friends.ejs","hash":"c4d5e04dabd54dc22776eab4b7f533cfbda2f05f","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/README.md","hash":"ceea1ea283f4e1fcea853f9a4f145c30742e9fbf","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/LICENSE","hash":"13b0862f4ed1914abe887a47df2c3ca5adfa8f3f","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/index.ejs","hash":"357f0574bcae7969bf423e72add5b697b9c73a9b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/layout.ejs","hash":"b96a88cbb6a1e7e64eeec7ad2b15bc274cc6009d","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/list.ejs","hash":"16088ee94e8355d308e64303f5f3b2786f113a53","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/page.ejs","hash":"f7ff6bf7764269518adf099b6ae60e422b3bcf13","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/post.ejs","hash":"f7ff6bf7764269518adf099b6ae60e422b3bcf13","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_cover/dock.ejs","hash":"6059bb83b46835a1a69d2a2a1161907deac8e63c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/tag.ejs","hash":"9b3e7c742daf3cf5e78a4621c3750fa3c82fdf65","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_cover/featured.ejs","hash":"6059bb83b46835a1a69d2a2a1161907deac8e63c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_cover/search.ejs","hash":"bb645648d5141bb8c9aa68c813a83c881248fb2b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/package-lock.json","hash":"48ee3f187b4d0c6b3d6ad6db900d2e20348db900","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_cover/focus.ejs","hash":"6059bb83b46835a1a69d2a2a1161907deac8e63c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/author.ejs","hash":"626540d45f9ad1b399ad3a8f8728e697c4cc14f6","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/category.ejs","hash":"87344f08ee5b902741ee15318576a80c44a38f2f","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/counter.ejs","hash":"7525a1b4bedbdab7deea0e8749e8797abfc3df7c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/date.ejs","hash":"95cc51ac8b413dae9c2559da358e67e83738cf74","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/share.ejs","hash":"da605bfce90fa4e56bad8a12b1c2f78af7227b97","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/tags.ejs","hash":"e9e576c18a9c92f88a2cf93da3de5f3962502093","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/thumbnail.ejs","hash":"715f1e0838a95bfea000607f6c5f2cd8c24cd625","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/updated.ejs","hash":"35b60195a900ec4c7b970e04d93a80a04fba9ea0","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/valinecount.ejs","hash":"024f8e45ff9130e4c5afdabddb765f28310ff6b7","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/music.ejs","hash":"34914ca5a61133f534d3ef36e59329d6c0de1c41","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/walinecount.ejs","hash":"c276bb2f4e7333b7276880c883b80acfde7d6d9a","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_meta/wordcount.ejs","hash":"eebaab3821af95ee64d8d56f33ca6c9c60b9b6f0","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/_pre.ejs","hash":"cc6927c01ec8c46b651d738512235694219dfb5b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/copyright.ejs","hash":"5c134f20458ddfab02af440a12ce0f1948677dd1","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/category.ejs","hash":"3a748973bec2c62ecd0e0cfd09a168d1dc87e6dc","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/blogger.ejs","hash":"1f6485ec2cb3a7367f637ea2d14a05200e1d682c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/grid.ejs","hash":"7c6f2fea543236e904888f4ab9a9ca7b53ad8d5a","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/group.ejs","hash":"2eed9614049441b51e6819f393f80faf5441870b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/list.ejs","hash":"446219f324d1316acf480bd4dc3af744833a566e","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/header.ejs","hash":"b132e332ddf12d1bb1d99480200561d8c38edd04","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/load.ejs","hash":"093fe26657021debbe1c3e3acd14b03e9f90b6fe","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/music.ejs","hash":"43ad06a136aa9a5522358e625c7598b6c4c32e2a","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/page.ejs","hash":"07779b12dfa88860ec56fc3bae3540dba9aba4bf","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/qrcode.ejs","hash":"94d97f9273a64d47f2aff2f68b59c4fd9cc2206b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/references.ejs","hash":"8be0102cda29802e5517b3b9286fe71ca7c4c6bf","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/related_posts.ejs","hash":"1d3f03e9ab3683ebed5ee6a220276f96b5757456","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/tagcloud.ejs","hash":"527bcd61ccd8c6ac8f9e5c8a359a2f10c7fa0dc4","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/text.ejs","hash":"d9d8605900ef60e4e9e78da2a81e849a45749c2c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/toc.ejs","hash":"e4266873eb4ee7163dfd96069ff0e2ebe2cc6337","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_widget/webinfo.ejs","hash":"8e6506e10b3b741f52f30d04f938d1abd3e9cefa","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/archive.ejs","hash":"17e6293f05946a1a8d7f7d930feae4884ca65d26","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/article.ejs","hash":"0db5d00c2166e98fe38c92f4c24ecc668bafa614","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/categories.ejs","hash":"12b2fca703fa56da7a85045bf17499845c3fe5bb","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/cover.ejs","hash":"65dc41d6d4f27b5fa0b17954a38f1786ef3290f2","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/footer.ejs","hash":"840b9ce4ac1fb251bb4c1230f9d0e5d8abeb0cb3","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/head.ejs","hash":"bbb75c52bc569db7d1da9f55a6cfd5745b4492aa","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/header.ejs","hash":"d7ca6c171bf366f36c3cae5505613ba9f1f3a39e","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/meta.ejs","hash":"92661e47506a60e576ea860dff4c89d5cc8f4eeb","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/rightmenu.ejs","hash":"a083a87390e199b0949c3beb91d5d022bb7fa0fa","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/post.ejs","hash":"ed530efd48afef5d66d043972e4e5307f24c1806","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/side.ejs","hash":"b82978c85dc3f9db0979cc26e168f6ec8ee97cfc","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/snackbar.ejs","hash":"dfe21318d5a9f2c634ba110509e323114f6f0345","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/related_posts/index.js","hash":"29ab8fbb7110b257cfc8c23e31c26d763250ac16","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/render/img.js","hash":"160732831bec5baf89fa07a85fec5229c3cb9cd7","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/z-lazyload/index.js","hash":"00807c9898fff8f712fc8f311ed0bdd84c71b812","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/btn.js","hash":"f6210feb36158a85ad0f3ed28cbca95244010d45","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/btns.js","hash":"6a257bbcfffbebed523796f5e7c649397bcb7014","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/checkbox.js","hash":"b398969bd13fa37c90a323242f2d6be5c0dacbd1","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/dropmenu.js","hash":"1ee8e53286e1177348652ecdd0bc7a30f78aba4f","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/fancybox.js","hash":"5b2d1fa2cd7e84f0a0afe8b3ea5da742f668dcac","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/folding.js","hash":"b8ab446028a473621af46ce9c90a3c34ddae7d04","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/frame.js","hash":"9edd37e2a20926fcb76ee40e9f009654a58b25f1","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/ghcard.js","hash":"2e0359ca4bc781b29bdd8c827f6349e7b369ea02","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/image.js","hash":"d23c426ca0beb9528a00f0e4185eddd023889ee8","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/inline-labels.js","hash":"08fbdc0ea622270e1236a28778f875c8ad2e5516","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/issues.js","hash":"10972bbb5579aaf024b86d3e754d5a9a82a839c7","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/link.js","hash":"3da403bcea083d5f5e806404d79beb80f925b1ba","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/media.js","hash":"04434a1760ec70d23f726921ba3e74898af4b531","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/note.js","hash":"f596bed648d8819b296efecb28625d0f2a447fbc","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/site.js","hash":"56e270f7242570ab300ec933c9932300e3e3b8fa","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/span.js","hash":"02bd46baade6a936695abb90a8360435e7ad9798","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/table.js","hash":"ad82046fc64f932019d8a7b3e9a8ff07973a6c3b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/tabs.js","hash":"6b0025eb2fccfa50cf64410c081c90141c0ae10a","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/tags/timeline.js","hash":"23aeacce94c359765347fb83ba7fdb637bcac723","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/events/index.js","hash":"3d7f20c205f654832378cde24c49e79993fe27e7","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/first.styl","hash":"c8da6b4c3feddb1994f4a8592ecb7e44abfc088d","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/js/app.js","hash":"8257ceb59596e4aaef5f727de391d3b6687368bf","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/style.styl","hash":"252921e8d4d20c16f9dd731f93ae25d27ab404fb","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/js/aplayer.js","hash":"c19b26838cd47ec179100b006673788a98aa4577","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/js/issues.js","hash":"f9ad62c367eed45fd641202d0a574c7deacf645b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/aplayer/layout.ejs","hash":"51b4f54a165fbca56c9beec3ce19bc62f10097d9","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/aplayer/script.ejs","hash":"e789e2da9cc13cbf379d8b45791430cf610d4e77","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/analytics/script.ejs","hash":"3c03ef1e8b022fcb9d5046fa0990aadcc271f9db","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/end-of-support/script.ejs","hash":"4f8f1e3ee1f657c11419c860fa89d4fbf434359a","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/clipboard/script.ejs","hash":"0ee37af1e274ed251211d7209f0e0ccd1bf98e0f","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/fancybox/script.ejs","hash":"42e17172d186dcfcefb8c5da961e39f073dbce4d","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/lazyload/script.ejs","hash":"ff04f6563ae8295295b3eb37042e74f5d4abb578","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/index.ejs","hash":"c7a2c7724c3a41d95bca2797ddc777c6b9a82cd4","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/pjax/index.ejs","hash":"03783b8e90c4d72aaacb58906751ee284e318539","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/highlightjs/script.ejs","hash":"d8b65df904cc9066d1afe399ce6a17d881e61551","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/pjax/animate.ejs","hash":"06388047791e4e148672778a7a9ddac8b70f3f31","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/nodewaves/script.ejs","hash":"7e3104db8db2ade7e7c6c79cb2b3144ed284dff4","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/preload/script.ejs","hash":"24fc00ce669d90c3ec265e4faf639bed613b75b2","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/pjax/pdata.ejs","hash":"4fe1878f1eb2b2c059729e4fe4c205e90249eeff","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/scrollreveal/script.ejs","hash":"235a13bd37e53e865c22b96e204705a2b24a0e4c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/scripts/counter.ejs","hash":"ecad85a3d5776614335783e13a9497b1538731a3","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/scripts/cover.ejs","hash":"1c8364ff9eab5a5bc15757c7bc765015ab559ca6","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/scripts/coverCtrl.ejs","hash":"a7f6f87b643ab076acc0fcfcb747b07a72719c1b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/scripts/global.ejs","hash":"0de1ce34385923d4568343ce6a3fc7bf4ac6894b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/share/layout.ejs","hash":"bc2aeea593ddb818dc7596ca2f34640fbfb7b2f3","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/scripts/index.ejs","hash":"f1d26a03991fdd457aaff5fe25615067469447fa","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/tidio/script.ejs","hash":"e0e803dc4c2fb9f32cbad14e8c4ddd2075903793","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/scripts/import.ejs","hash":"ec6b9f024a3760ed4140f6fd2f1d656aff24d83c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/scripts/darkmode.ejs","hash":"19405572c434b4e504f3617aa17d872ca15a43bb","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/scripts/toc.ejs","hash":"291a53ecb97c121e922ad9ae1509e329ceef6ffe","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/z-lazyload/lib/process.js","hash":"5ac40483d0ad0ec353867da03f9628932279d1b1","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/scripts/events/lib/config.js","hash":"85c6d05613bfd701d8e2075a3523f4b26082e94b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_defines/color.styl","hash":"7daf9290bc32dd4040bf9616da2722247f6a5d5c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_base/index.styl","hash":"7dcad03f533010fd470dee03feaf1e4bca08b6c9","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_defines/fonts.styl","hash":"9bb83f05b286aa03d6c9652ec0b42921d049d3bf","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_defines/effect.styl","hash":"f0ee405f536f6852db92385c62c32421ef4e163e","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_defines/layout.styl","hash":"d1bdce2e7974b1feb585adcdf95e36a054a36ec4","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_first/cover.styl","hash":"2ff99b7c1aa0ee8dab2ac2d899e7b03d9f33beaf","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/scripts/issues.ejs","hash":"550518b97c8238a77bef62abbe524c5c29d86f15","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_partial/scripts/search.ejs","hash":"33b7c2b46c283953fd4a40959d38087eb2d5a8c6","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_defines/func.styl","hash":"487ce9f5770f173d8cb8610c3235413b4644811d","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_first/search.styl","hash":"ef8568cd9d47e698fdd5137ccd55a0de6282c348","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_first/navbar.styl","hash":"394b397478ee2e1fa7a90c9c3bcd7f3ea365464d","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_highlight/index.styl","hash":"b12e2f04e1db2f5e653287797ff3f56bcff6c18e","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/archive.styl","hash":"a96709230abbc8d4fc40361b8fc02d4249abb4a1","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/footer.styl","hash":"bb850b4707ee025e267e079fcf85484849cf4f41","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/article.styl","hash":"7091544bff230763eb3b0307de5a8c0bbba19fa6","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/friends.styl","hash":"74caf0cb9c1fe1b7e5b7a91a335857848b473203","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/md.styl","hash":"d9b25d8199d3d5260c89e8ad84f1a17531b85588","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/pagination.styl","hash":"08ec15af4b64dce67049ed332b77d87e4016bb0b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/img.styl","hash":"55d79f07b717d3e28515b41401f656d1593be624","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/posts.styl","hash":"000c17b4fca40df21f6d2c0bca1d7b01d5c25648","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/sidebar.styl","hash":"7f704b5d9996ad82cfb25ba9ed7b34475a9baf8a","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/toc.styl","hash":"c92257d2555a8be022023c7442d3e042a2e2ebd0","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/video.styl","hash":"680e8cf8fc5d62913dad4ccd06135caad2bb3e92","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/snackbar.styl","hash":"752a7fea5284a61fd9305d3b0fcaa43f2e64862f","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/darkmode.styl","hash":"ed2efcd8a54d08949abb8e933c99678769e8e429","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/aplayer.styl","hash":"4613afce3cd57e288e6a3bf91c967196fb0277bd","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/dark.styl","hash":"b33ab67d43d97470e249d8fcb43875cff7db6a63","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/fancybox.styl","hash":"284aed2ca59ae0544885daebb4393d9e5f76a33d","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/clipboard.styl","hash":"b3e1b45144de8f68c8d8652f1d70f9e354ed7ffc","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/mathjax.styl","hash":"11ee86571f31f9aa61dcc48b40977dcd974d76a4","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/index.styl","hash":"7d58c7056af897b116cd50a51ac2d10c4a901c7e","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/pjaxanimate.styl","hash":"86c80d1d1c8a02c0eb4c0b5d29ff41c9a5dd5ac3","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/cursor.styl","hash":"13eef32b9e2998ad10133f3283b43f9f26a59803","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/twikoo.styl","hash":"56bd90ec80836f7e78b6f820f3e35868723503b0","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/valine.styl","hash":"06be2ad39dc6786842ac9ebc345e6c022ae96f8c","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/gitalk.styl","hash":"c4c9950fd6654f87ca4f481cf3065ca4069fac48","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/btns.styl","hash":"bf592cd78c146bb671217f106632b9e5bcc7c145","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_plugins/rightmenu.styl","hash":"51cf19a6c2c8886c13e7f30db9c5c5f9db67676f","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/checkbox.styl","hash":"8c62dd38914d939069d9222c54787a24cb5c31f7","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/dropmenu.styl","hash":"a136ebb90bedef15c1d8b8d75e09b37c3873f5e8","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/folding.styl","hash":"253f13e60218e0d014a1df99933f5cdba507f3b1","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/frame.styl","hash":"6ffbb29514781aa4fa7d7653706554ce33f4525b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/ghcard.styl","hash":"58adb206695a704b1f40df42e2dc10e9e9055aeb","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/image.styl","hash":"bb4b07841602592e421597ba8dd7110edec789d8","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_layout/main.styl","hash":"471b4ac8d05355277f625076474ff4409234c6d5","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/link.styl","hash":"82cdcc537612eec3e1af40d00edf80b14116c191","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/media.styl","hash":"576c9eede3a8f9ec2ba1a970e92a49154ec3acb3","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/note.styl","hash":"005d3c55c2216d7c88661f79ad466ad89fad4784","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/simpleuser.styl","hash":"40376e0ccc232a985c96bbd1b0b85f6d3a647160","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/site-card.styl","hash":"b289c6beddc89a062bec0c9ecfb0dd7c24d64925","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/span.styl","hash":"6e9f8b453244d9241d3fceed0a56e12c86a4b446","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/table.styl","hash":"ef07ab4fe8a391ea9039fbe53333aaf58e3ce033","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/tabs.styl","hash":"a2366f4fe1d9f06e47a7a994cfc80a1edbf6c535","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/css/_tag-plugins/timeline.styl","hash":"f84f411a3b7dcdbfd4fb19ac4e0f91300c5e19be","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/js/search/algolia.js","hash":"4c4984b0680b21fde8ca25d03e1896987fcac16f","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/js/search/azure.js","hash":"fa03d312c25f120774ab2a6144c3e5949b7bf7f4","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/js/search/google.js","hash":"000dc1848ba5ce6e9a3d2377b3fb15a4ab396760","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/disqusjs/layout.ejs","hash":"4601c6b51f9a32a24a8e1699647c4a281d16b179","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/js/search/baidu.js","hash":"74ff709126fd9f9ef78e7aebde69c889ab9d5f53","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/js/search/hexo.js","hash":"e7b9af393c9e0ef34ed585fbe26419e1298d9b26","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/disqusjs/script.ejs","hash":"eb59c3ced4660f0437dbd5c6f34f72dc8372ab2b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/gitalk/layout.ejs","hash":"e487450c523b15aebba2e4c197eee3096fb43771","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/gitalk/script.ejs","hash":"b1a93824b123e6e8b5ec3056943e8577a4ec1501","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/disqus/layout.ejs","hash":"2cee86351e5da45662c2972f56c76d98cd50e912","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/isso/layout.ejs","hash":"b267acebcd934eb7b766abc81c2686f6611aeaa9","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/disqus/script.ejs","hash":"5b8a0039f3f236690ce40bb94a37641e36d445da","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/isso/script.ejs","hash":"392db303e203e76fe89ed81b388649df10a2d567","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/minivaline/layout.ejs","hash":"b8289eb42d54048b11986cdb1ab00dc2f450d482","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/livere/layout.ejs","hash":"c610eb41b79a24918dfe2be9d5a9e785eee0ee0d","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/minivaline/script.ejs","hash":"edc5d8dd667269b7e7f06abd950acf837f8327dc","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/livere/script.ejs","hash":"0e8817c7d08fb65eba1d2b53d341ac83b495e5f5","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/valine/layout.ejs","hash":"1681a941051d15701ca6293bb475ad3390ae6155","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/valine/script.ejs","hash":"78d7cfda99bfba5b3aa5c4013e073d8e46425952","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/twikoo/script.ejs","hash":"dba1b32915008d4f2f474ee8eb995fd1d5cbfef2","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/vssue/script.ejs","hash":"e0bac119a3d2e4234b99115e92659f452ae5449b","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/twikoo/layout.ejs","hash":"a54fad791dbb8a6ef800925d90d8bceb6e3a0a99","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/vssue/layout.ejs","hash":"0f130f44e80b13a45e3ad695f808cb282e89dc21","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/math/mathjax/script.ejs","hash":"6084d881f4b1fc4e8ba3aaf457ade7e18e997232","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/waline/layout.ejs","hash":"6a02585a157df87b09529da3d031818fd48fb4b5","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/hashover/layout.ejs","hash":"d854ca80765eb44baa3eaa685db888bbf238323d","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/hashover/script.ejs","hash":"d36cfa0a96ad8e89306e43eb8080a98b0b17f6a5","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/layout/_third-party/comments/waline/script.ejs","hash":"98989d32730dfb27e7d75674ca8f8b49a9fad75d","modified":1611630044000},{"_id":"node_modules/hexo-theme-volantis/source/js/valine.js","hash":"63916e2be7d378e9d32271371c588e75e69c871e","modified":1611630044000},{"_id":"source/friends/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617699375393},{"_id":"source/messages/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1617699379254},{"_id":"source/_data/menu.yml","hash":"c50b35401cd2327ec73f86dadc152628ad3f1540","modified":1617699784948},{"_id":"source/_posts/前端自动化测试.md","hash":"64878bc3cf4b106ec5efac75fc7cc1cd78437a39","modified":1617701182682},{"_id":"source/.DS_Store","hash":"015b9de0bf06d560b681bec531f00338be809866","modified":1617700995849},{"_id":"node_modules/hexo-theme-volantis/.DS_Store","hash":"6623a5ea4d2ca62e5055763c47aaa1e37064b7e3","modified":1617700995787},{"_id":"source/_posts/web前端相关/前端自动化测试.md","hash":"d9a58563ae93ad7eaff750d8b394ae7a0a3349e4","modified":1617702803391},{"_id":"source/_posts/大前端/前端自动化测试.md","hash":"96a56c5b546568535b0d2d2dc0a008852a83b197","modified":1617703174968}],"Category":[{"name":"进阶玩法","_id":"ckn5tjliy0001dv7ybe2w52ai"},{"name":"web前端相关","_id":"ckn5ug06c0005dv7ydsawhtjy"},{"name":"大前端","_id":"ckn5ujmrl0002eh7ybp53eay6"}],"Data":[],"Page":[{"layout":"category","index":true,"title":"所有分类","_content":"","source":"categories/index.md","raw":"---\nlayout: category\nindex: true\ntitle: 所有分类\n---","date":"2021-04-06T08:32:04.583Z","updated":"2021-04-06T08:32:04.583Z","path":"categories/index.html","comments":1,"_id":"ckn5ry02i0000pv7y2map6l1d","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tag","index":true,"title":"所有标签","_content":"","source":"tags/index.md","raw":"---\nlayout: tag\nindex: true\ntitle: 所有标签\n---","date":"2021-04-06T08:32:38.219Z","updated":"2021-04-06T08:32:38.219Z","path":"tags/index.html","comments":1,"_id":"ckn5ry02o0002pv7y4vix7f7t","content":"","site":{"data":{}},"excerpt":"","more":""},{"cover":true,"robots":"noindex,nofollow","sitemap":false,"seo_title":"404 Not Found","bottom_meta":false,"sidebar":[],"valine":{"path":"/404.html","placeholder":"请留言告诉我您要访问哪个页面找不到了"},"_content":"\n{% p logo center huge, 404 %}\n{% p center bold, 很抱歉，您访问的页面不存在 %}\n{% p center small, 可能是输入地址有误或该地址已被删除 %}\n","source":"404.md","raw":"---\ncover: true\nrobots: noindex,nofollow\nsitemap: false\nseo_title: 404 Not Found\nbottom_meta: false\nsidebar: []\nvaline:\n  path: /404.html\n  placeholder: 请留言告诉我您要访问哪个页面找不到了\n---\n\n{% p logo center huge, 404 %}\n{% p center bold, 很抱歉，您访问的页面不存在 %}\n{% p center small, 可能是输入地址有误或该地址已被删除 %}\n","date":"2021-04-06T08:35:47.057Z","updated":"2021-04-06T08:35:47.057Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ckn5ry02p0003pv7y4ppbbfm8","content":"<p class='p logo center huge'>404</p>\n<p class='p center bold'>很抱歉，您访问的页面不存在</p>\n<p class='p center small'>可能是输入地址有误或该地址已被删除</p>\n","site":{"data":{}},"excerpt":"","more":"<p class='p logo center huge'>404</p>\n<p class='p center bold'>很抱歉，您访问的页面不存在</p>\n<p class='p center small'>可能是输入地址有误或该地址已被删除</p>\n"},{"_content":"","source":"messages/index.md","raw":"","date":"2021-04-06T08:56:19.254Z","updated":"2021-04-06T08:56:19.254Z","path":"messages/index.html","_id":"ckn5sfxwc0001n87y1f2dd461","title":"","comments":1,"layout":"page","content":"","site":{"data":{"menu":[{"name":"首页","icon":"fas fa-rss","url":"/"},{"name":"导航","icon":"fas fa-rss","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"更多","icon":"fas fa-link","rows":[{"name":"友链","icon":"fas fa-link","url":"friends/"},{"name":"留言","icon":"fas fa-info-circle","url":"messages/"}]}]}},"excerpt":"","more":""},{"_content":"","source":"friends/index.md","raw":"","date":"2021-04-06T09:13:02.413Z","updated":"2021-04-06T09:13:02.413Z","path":"friends/index.html","title":"","comments":1,"layout":"page","_id":"ckn5t1fvx0000hf7y0bdn8o3v","content":"","site":{"data":{"menu":[{"name":"首页","icon":"fas fa-rss","url":"/"},{"name":"导航","icon":"fas fa-rss","rows":[{"name":"分类","icon":"fas fa-folder-open","url":"categories/"},{"name":"标签","icon":"fas fa-tags","url":"tags/"},{"name":"归档","icon":"fas fa-archive","url":"archives/"}]},{"name":"更多","icon":"fas fa-link","rows":[{"name":"友链","icon":"fas fa-link","url":"friends/"},{"name":"留言","icon":"fas fa-info-circle","url":"messages/"}]}]}},"excerpt":"","more":""}],"Post":[{"title":"前端自动化测试","date":"2021-04-05T16:00:00.000Z","_content":"\n在前端大型项目开发的过程中，自动化测试都是不可缺少的一环。自动化测试不但可以降低 bug 出现的频率，也可让项目更加健壮\n\n<!-- more -->\n\n# 前端自动化测试\n\n## 1. 单元测试\n\n对软件中的最小可测试单元进行检查和验证，在前端一般为一个模块。\n\n### 1.1 单元测试的优缺点\n\n1. 测试覆盖率高\n2. 业务耦合度高\n3. 代码量大\n4. 过于独立\n\n### 1.2 总结\n\n在某些场景下适合适用单元测试，某些场景下不适合适用单元测试\n\n## 2. 集成测试\n\n又叫组装测试或联合测试，在单元测试的基础上，将所有模块按照设计要求（如根据结构图）组装成为子系统或系统，进行集成测试。\n\n## 3. jest 中的匹配器\n\n[jest 匹配器官网](https://jestjs.io/docs/en/expect)\n\n修改 `jest`  默认配置命令 `npx jest --init`\n\n### 3.1 实时监听测试用例的改变\n\n`jest --watchAll` 一旦某个测试用例发生变化，所有的测试用例都将会重新执行\n\n`jest --watch`  默认进入 `o`  模式，即只对发生变化的测试用例重新执行\n\n### 3.2 常用匹配器\n\n### 3.2.1 toBe()\n\n```jsx\ntest(\"测试toBe的匹配器\", () => {\n  const a = { name: \"张三\" };\n  expect(a).toBe({ name: \"张三\" });\n});\n// ❌ 因为引用类型使用toBe不是全等效果\n```\n\n`toBe` 匹配器类似于 `===`。\n\n---\n\n### 3.2.2 toEqual()\n\n```jsx\ntest(\"测试toEqual的匹配器\", () => {\n  const a = { name: \"张三\" };\n  expect(a).toBe({ name: \"张三\" });\n});\n// ✅ 因为toEqual只是对结果的匹配，而不是全等效果\n```\n\n`toEqual` 匹配器只是对结果相等与否进行匹配\n\n---\n\n### 3.2.3 toBeNull()\n\n```jsx\ntest(\"测试toBeNull的匹配器\", () => {\n  const a = null;\n  expect(a).toBeNull();\n});\n// ✅\n```\n\n`toBeNull` 是对 `null` 值的匹配\n\n---\n\n### 3.2.4 toBeUndefined()\n\n```jsx\ntest(\"测试toBeUndefined的匹配器\", () => {\n  const a = undefined;\n  expect(a).toBeUndefined();\n});\n// ✅\n```\n\n`toBeUndefined` 是对 `undefined` 值的匹配\n\n---\n\n### 3.2.5 toBeDefined()\n\n```jsx\ntest(\"测试toBeDefined的匹配器\", () => {\n  const a = 1;\n  expect(a).toBeDefined();\n});\n// ✅\n```\n\n`toBeDefined` 是对已经定义的值的匹配，若为 `undefined` 则不通过\n\n---\n\n### 3.2.6 toBeTruthy()\n\n```jsx\ntest(\"测试toBeTruthy的匹配器\", () => {\n  const a = 0;\n  expect(a).toBeTruthy();\n});\n// 0 => ❌，因为 toBeTruthy 是对 true 值的匹配\n// 1 => ✅\n```\n\n`toBeTruthy` 是对 `true` 值的匹配\n\n---\n\n### 3.2.7 toBeFalsy()\n\n```jsx\ntest(\"测试toBeFalsy的匹配器\", () => {\n  const a = 1;\n  expect(a).toBeFalsy();\n});\n// 1 => ❌\n// 0 => ✅\n```\n\n`toBeFalsy` 是对 `false` 值的匹配\n\n---\n\n### 3.2.8 toBeGreaterThan()\n\n```jsx\ntest(\"测试toBeGreaterThan匹配器\", () => {\n  const count = 10;\n  expect(a).toBeGreaterThan(9);\n});\n// ✅\n```\n\n`toBeGreaterThan` 相当于 `>`\n\n---\n\n### 3.2.9 toBeLessThan()\n\n```jsx\ntest(\"测试toBeLessThan匹配器\", () => {\n  const count = 8;\n  expect(a).toBeLessThan(9);\n});\n// ✅\n```\n\n`toBeLessThan` 相当于 `<`\n\n---\n\n### 3.2.10 toBeGreaterThanOrEqual()\n\n```jsx\ntest(\"测试toBeGreaterThanOrEqual匹配器\", () => {\n  const count = 10;\n  expect(a).toBeGreaterThanOrEqual(10);\n});\n// ✅\n```\n\n`toBeGreaterThanOrEqual` 相当于 `>=`\n\n---\n\n### 3.2.11 toBeLessThanOrEqual()\n\n```jsx\ntest(\"测试toBeLessThanOrEqual匹配器\", () => {\n  const count = 10;\n  expect(a).toBeLessThanOrEqual(10);\n});\n// ✅\n```\n\n`toBeLessThanOrEqual` 相当于 `<=`\n\n---\n\n### 3.2.12 toBeCloseTo()\n\n```jsx\ntest(\"测试toBeCloseTo匹配器\", () => {\n  const one = 0.1;\n  const two = 0.2;\n  expect(one + two).toEqual(0.3);\n});\n// ❌ 因为浮点精度不同\n\ntest(\"测试toBeCloseTo匹配器\", () => {\n  const one = 0.1;\n  const two = 0.2;\n  expect(one + two).toBeCloseTo(0.3);\n});\n// ✅\n```\n\n`toBeCloseTo` 为了解决浮点精度不同导致的无法匹配的问题\n\n---\n\n### 3.2.13 toMatch()\n\n```jsx\ntest(\"测试toMatch匹配器\", () => {\n  const str = \"张三、李四、王五\";\n  expect(str).toMatch(\"李四\");\n});\n// ✅\n\ntest(\"测试toMatch匹配器\", () => {\n  const str = \"张三、李四、王五\";\n  expect(str).toMatch(/李四/);\n});\n// ✅\n```\n\n`toMatch` 为字符串包含匹配器，用来匹配字符串中包含的内容，也可传正则表达式\n\n---\n\n### 3.2.14 toContain()\n\n```jsx\ntest(\"测试toContain匹配器\", () => {\n  const arr = [\"张三\", \"李四\", \"王五\"];\n  expect(arr).toContain(\"张三\");\n});\n// ✅\n\ntest(\"测试toContain匹配器\", () => {\n  const arr = [\"张三\", \"李四\", \"王五\"];\n  const data = new Set(arr);\n  expect(data).toContain(\"张三\");\n});\n```\n\n`toContain` 为数据包含匹器，用来匹配数组中包含的项。同时可完全兼容 `Set` 测试\n\n---\n\n### 3.2.15 toHaveLength()\n\n```jsx\n/// functions.js\nexport default {\n  getIntArray(num) {\n    if (!Number.isInteger(num)) {\n      throw Error('\"getIntArray\"只接受整数类型的参数');\n    }\n    let result = [];\n    for (let i = 0, len = num; i < len; i++) {\n      result.push(i);\n    }\n    return result;\n  }\n};\n\n/// functions.test.js\nimport { getIntArray } from \"../src/functions\";\ntest(\"getIntArray(3)返回的数组长度应该为3\", () => {\n  expect(getIntArray(3)).toHaveLength(3);\n});\n```\n\n`toHaveLength`可以很方便的用来测试字符串和数组类型的长度是否满足预期。\n\n### 3.2.16 toThrow()\n\n```jsx\nconst throwNewErrorFunc = () => {\n  throw new Error(\"this is a new error\");\n};\n\ntest(\"测试toThrow匹配器\", () => {\n  expect(throwNewErrorFunc).toThrow();\n});\n```\n\n`toThrow` 是专门对异常进行处理的匹配器，可以检测一个方法会不会抛出异常\n\n```jsx\nconst throwNewErrorFunc = () => {\n  throw new Error(\"this is a new error\");\n};\n\ntest(\"测试toThrow匹配器\", () => {\n  expect(throwNewErrorFunc).toThrow(\"this is a new error\");\n});\n```\n\n我们也可以对这个匹配器中加一些字符串，意思就是抛出的异常必须和字符串相对应，如果字符串不匹配，也没办法通过异常测试。\n\n---\n\n### 3.2.17 not()\n\n```jsx\nconst throwNewErrorFunc = () => {\n  throw new Error(\"this is a new error\");\n};\n\ntest(\"测试not匹配器\", () => {\n  expect(throwNewErrorFunc).not.toThrow();\n});\n```\n\n`not` 匹配器是 `jest` 中比较特殊的匹配器，意思就是 “相反” 或者说 “取反” .比如上面的例子，我们不希望方法抛出异常，就可以使用`not` 匹配器。\n\n---\n\n### 3.3 异步代码测试方法\n\n### 3.3.1 回调函数式\n\n```jsx\n/// fetchData.js\nimport axios from \"axios\";\nexport const fetchData = fn => {\n  axios.get(\"http://a.jspang.com/jestTest.json\").then(res => {\n    fn(res.data);\n  });\n};\n\n/// fetchData.test.js\nimport { fetchData } from \"./fetchData.js\";\ntest(\"fetchData测试\", done => {\n  fetchData(data => {\n    expect(data).toEqual({ success: true });\n    done();\n  });\n});\n```\n\n必须加入一个 `done` 方法，保证我们的回调已经完成了，这时候我们表示测试完成\n\n---\n\n### 3.3.2 直接返回 Promise\n\n```jsx\n/// fetchTwoData.js\nimport axios from \"axios\";\nexport const fetchTwoData = () => axios.get(\"http://a.jspang.com/jestTest.json\";\n\n/// fetchTwoData.test.js\nimport { fetchTwoData } from \"./fetchTwoData.js\";\ntest(\"fetchTwoData的测试用例\", () => {\n return fetchTwoData().then(res => {\n  expect(res.data).toEqual({ success: true });\n });\n});\n```\n\n注意要 `return`\n\n### 3.3.3 不存在的接口\n\n```jsx\n/// fetchData.js\nexport const fetchData = () => {\n  return axios.get(\"http://a.jspang.com/jestTest_error.json\"); // 此地址并不存在\n};\n\n/// fetchData.test.js\n// 方式1\ntest(\"fetchData测试\", () => {\n  expect.assertions(1); // 断言，必须执行一次 expect\n  return fetchData().catch(err => {\n    expect(err.toString().indexOf(\"404\") > -1).toBe(true);\n  });\n});\n\n// 方式2\ntest(\"fetchData测试\", async () => {\n  return await fetchData().rejects.toThrow();\n});\n\n// 方式3\ntest(\"fetchData测试\", async () => {\n  expect().assertions(1); // 断言，必须执行一次 expect\n  try {\n    await fetchData();\n  } catch (err) {\n    expect(err.toString().indexOf(\"404\") > -1).toBe(true);\n  }\n});\n```\n\n因为测试用例使用了 `catch` 方法，也就是说只有出现异常的时候才会走这个方法，而现在没有出现异常，就不会走这个测试方法，`jest` 就默认这个用例通过了测试。因此必须要执行断言，即必须让其执行一次即可。\n\n### 3.3.4 async/await\n\n```jsx\n/// fetchData.js\nexport const fetchData = () => {\n return axios.get(\"http://a.jspang.com/jestTest.json\"); // 此地址并不存在};\n\n/// fetchData.test.js\n// 方式1\ntest(\"fetchData测试\", async () => {\n await expect(fetchData()).resolves.toMatchObject({\n  data: {\n   success: true\n  }\n });\n});\n\n// 方式2\ntest(\"fetchData测试\", async () => {\n const response = await fetchData();\n expect(response.data).toEqual({ success: true });\n});\n```\n\n这时候我们的代码使用 `async....await...` 的形式，这里我们还使用了 `resolves` 用于把现有对象转换成 `Promise` 对象，然后使用 `jest` 中的 `toMatchObject` 进行匹配对象中的属性。\n\n## 4. jest 中的四个钩子函数\n\n### 4.1 beforeAll()\n\n`beforeAll()`钩子函数的意思是在所有测试用例之前进行执行。\n\n### 4.2 afterAll()\n\n`afterAll()`钩子函数是在完成所有测试用例之后才执行的函数。\n\n### 4.3 beforeEach()\n\n`beforeEach()`钩子函数，是在每个测试用例前都会执行一次的钩子函数。\n\n### 4.4 afterEach()\n\n`afterEach()`钩子函数，是在每次测试用例完成测试之后执行一次的钩子函数。\n\n## 5. jest 测试用例分组\n\n```jsx\n/// eat.js\nexport default class Eat {\n  setName(number) {\n    this.name = number === 1 ? \"水饺\" : \"火锅\";\n  }\n  setDesc() {\n    this.desc = this.user + \"描述\";\n  }\n  setMoney() {\n    this.money = this.name === \"水饺\" ? 80 : 300;\n  }\n}\n\n/// eat.test.js\nimport Eat from \"./eat\";\nconst eat = new Eat();\nbeforeAll(() => {\n  console.log(\"开始吃饭\");\n});\nafterAll(() => {\n  console.log(\"吃完饭了\");\n});\ndescribe(\"水饺相关内容\", () => {\n  test(\"测试水饺描述\", () => {\n    eat.setName(1);\n    eat.setDesc();\n    expect(eat.desc).toEqual(\"水饺描述\");\n  });\n  test(\"测试水饺价格\", () => {\n    eat.setName(1);\n    eat.setMoney();\n    expect(eat.money).toEqual(80);\n  });\n});\ndescribe(\"火锅相关内容\", () => {\n  test(\"测试火锅描述\", () => {\n    eat.setName(2);\n    eat.setDesc();\n    expect(eat.desc).toEqual(\"火锅描述\");\n  });\n  test(\"测试火锅价格\", () => {\n    eat.setName(2);\n    eat.setMoney();\n    expect(eat.money).toEqual(300);\n  });\n});\n```\n\n## 6. 钩子函数的作用域\n\n### 6.1 钩子函数在父级分组可作用域子集，类似继承\n\n即父级作用域下的钩子函数在子作用域下也生效\n\n### 6.2 钩子函数同级分组作用域互不干扰，各起作用\n\n同作用域下将都会执行\n\n### 6.3 先执行外部的钩子函数，再执行内部的钩子函数\n\n优先父级作用域下的钩子函数，其次执行子作用域下的钩子函数\n\n### 6.4 在进行测试准备的时候，将对应逻辑写到钩子函数\n\n如果将对应逻辑写到了非钩子函数的位置，那么将会优先执行，然后才会执行钩子函数\n\n### 6.5 对单个测试用例的调试\n\n当一个测试文件中的测试用例变得越来越多的时候，假如此时我们相对其中某一个测试用例进行调试，那么我们就需要使用 `test.only`\n\n```jsx\ntest.only(\"测试用例\", () => {\n  expect(1 + 1).toBe(2);\n});\n```\n\n## 7. Jest 中的 Mock\n\n### 7.1 作用\n\n### 7.1.1 捕获函数的调用和返回结果，以及 `this` 和调用顺序\n\n### 7.1.2 它可以让我们自由的设置返回结果\n\n### 7.1.3 改变内部函数的实现\n\n### 7.2 判定函数是否被调用\n\n```jsx\n// demo.js\nexport const runCallback = callback => {\n  callback();\n};\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  runCallback(func);\n  expect(func).toBeCalled(); // 测试用例被调用\n});\n```\n\n`jest.fn()`  可以帮助我们捕获函数的调用\n\n### 7.3 jest.fn().mock.calls 判定函数被调用了几次和传递的参数\n\n```jsx\n// demo.js\nexport const runCallback = callback => {\n  callback(\"张三\");\n};\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  runCallback(func);\n  runCallback(func);\n  expect(func.mock.calls.length).toBe(2); // 测试用例被调用2次\n  expect(func.mock.calls[0]).toEqual([\"张三\"]); // 测试用例传递的第一个参数是 \"张三\"\n});\n```\n\n此处打印 `func.mock`  将会打印一些常用的方法，可以根据需求进行相应的用例测试\n\n### 7.4 jest.fn().mockReturnValue() 判定函数执行了几次和返回结果\n\n```jsx\n// demo.js\nexport const runCallback = callback => {\n  callback(\"张三\");\n};\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  // func.mockReturnValue(\"Common\")\n  // 所有模拟返回值都是 \"Common\"\n  func.mockReturnValueOnce(\"A\"); // 第一次模拟返回值返回 \"A\"\n  func.mockReturnValueOnce(\"B\"); // 第二次模拟返回值返回 \"B\"\n  func.mockReturnValueOnce(\"C\"); // 第三次模拟返回值返回 \"C\"\n  runCallback(func);\n  runCallback(func);\n  runCallback(func);\n  expect(func.mock.results[0].value).toBe(\"A\");\n  expect(func.mock.results[1].value).toBe(\"B\");\n  expect(func.mock.results[2].value).toBe(\"C\");\n});\n```\n\n`func.mockReturnValue()`  将对所有模拟返回的值生效\n\n`func.mockReturnValueOnce()`  执行到第几次就对第几个函数的模拟返回值生效\n\n支持链式调用\n\n### 7.5 jest.fn().mock.invocationCallOrder 判定函数执行顺序\n\n```jsx\n// demo.js\nexport const runCallback = callback => {\n  callback(\"张三\");\n};\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  runCallback(func);\n  runCallback(func);\n  runCallback(func);\n  expect(func.mock.invocationCallOrder).toEqual([1, 2, 3]);\n});\n```\n\n### 7.6 jest.fn().mock.instances 判定函数调用了几次以及 this 指向\n\n```jsx\n// demo.js\nexport const createObject = (ClassItem) => {\n  new ClassItem();\n}\n\n// demo.test.js\nimport { createObject } from \"./demo\";\ntest(\"测试 createObject\", () => {\n  const func = jest.fn();\n  createObject(func);\n  expect(func.mock.instances).toEqual([mockConstructor{}]); // 此处的 this 就是 mockConstructor\n});\n```\n\n### 7.7 jest.fn().mockImplementation() 判定函数返回结果和其他逻辑处理\n\n```jsx\n// demo.js\nexport const runCallback = callback => {\n  callback(\"张三\");\n};\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  // func.mockImplementation(() => \"hello\"); 等价于 jest.fn(() => \"hello\")\n  // func.mockImplementation(() => this); 等价于 jest.fn().mockReturnThis()\n  func.mockImplementationOnce(() => \"dell\");\n  func.mockImplementationOnce(() => \"lee\");\n  runCallback(func);\n  runCallback(func);\n  runCallback(func);\n  expect(func.mock.results[0].value).toBe(\"dell\");\n  expect(func.mock.results[1].value).toBe(\"lee\");\n});\n```\n\n`mockImplementation`  比 `mockReturnValue`  更健壮，因为内部可以写一些额外的逻辑\n\n### 7.8 toBeCalledWith() 来判定每次函数调用时的参数\n\n```jsx\n// demo.js\nexport const runCallback = (callback) => {\n  callback(\"ABC\");\n}\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  runCallback(func);\n  expect(func.mock.results[0]).toEqual([\"ABC\");\n  expect(func).toBeCalledWith(\"ABC\");\n});\n```\n\n### 7.9 模拟异步请求\n\n对于前端来说一般异步接口是测试是否发送了，而不测试后端接口返回的内容，是属于后端自动化测试的内容\n\n### 7.9.1 通过模拟库的方式来模拟异步测试\n\n```jsx\n// demo.js\nexport const getData = () => {\n  return axios.get(\"/api\").then(res => res.data);\n};\n\n// demo.test.js\nimport axios from \"axios\";\nimport { getData } from \"./demo\";\njest.mock(\"axios\"); // 对 axios 进行模拟，这样就不会请求真正数据\ntest(\"测试 getData\", async () => {\n  axios.get.mockResolvedValue({ data: \"hello\" }); // 使用 axios 请求的时候模拟成功的返回值就是 hello\n  await getData().then(data => {\n    expect(data).toBe(\"hello\");\n  });\n});\n```\n\n`mockResolvedValue` 模拟不限次数\n\n`mockResolvedValueOnce` 模拟一次，模拟两次就会报错，需再次调用\n\n### 7.9.2 通过模拟 Promise 方式模拟异步\n\n```jsx\n// demo.js\nexport const fetchData = () => {\n  return axios.get(\"/\").then(res => res.data);\n};\n\n// __mocks__/demo.js\nexport const fetchData = () => {\n  return new Promise((resolve, reject) => {\n    resolve(\"function() { return '123' }\");\n  });\n};\n\n// demo.test.js\njest.mock(\"./demo\");\nimport { fetchData } from \"./demo\";\ntest(\"测试fetchData\", () => {\n  return fetchData().then(data => {\n    expect(eval(data)).toEqual(\"123\");\n  });\n});\n\n/// 实现方式3\n// 修改jest.config.js 可以自动查找项目内部__mocks__下与要测试文件名字相同的文件做替换\n// 等同于 jest.mock(\"要测试文件名字相同的__mocks__下的文件\"){  automock: true; }\n```\n\n### 7.9.3 通过修改 jest.config.js 来自动识别**mocks**下的文件\n\n修改 `jest.config.js` 可以自动查找项目内部 `__mocks__` 下与要测试文件名字相同的文件做替换\n\n等同于> `jest.mock(\"要测试文件名字相同的__mocks__下的文件\")`\n\n### 7.9.4 使用 jest.unmock() 可取消 mock 模拟\n\n### 7.9.5 解决测试文件中部分功能不需要 mock，部分功能需要 mock 模拟异步的问题\n\n```jsx\n// demo.js\nexport const fetchData = () => {\n  return axios.get(\"/\").then(res => res.data);\n};\nexport const getNumber = () => 123;\n\n// __mocks__/demo.js\nexport const fetchData = () => {\n  return new Promise((resolve, reject) => {\n    resolve(\"function() { return '123' }\");\n  });\n};\n\n// demo.test.js\njest.mock(\"./demo\");\nimport { fetchData } from \"./demo\";\nconst { getNumber } = jest.requireActual(\"./demo\"); // 引入真实文件\ntest(\"测试 fetchData\", () => {\n  return fetchData().then(data => {\n    expect(eval(data)).toEqual(\"123\");\n  });\n});\n\ntest(\"测试 getNumber\", () => {\n  expect(getNumber()).toEqual(123);\n});\n```\n\n## 8. snapshot 快照测试\n\n常用于测试配置文件\n\n### 8.1 toMatchSnapshot()\n\n```jsx\n// demo.js\nexport const generateConfig = () => {\n  return {\n    server: \"http://localhost\",\n    port: 8080,\n    domain: \"localhost\"\n  };\n};\n\n// demo.test.js\nimport { generateConfig } from \"./demo\";\ntest(\"测试 generateConfig\", () => {\n  expect(generateConfig()).toMatchSnapshot(); // 将会在项目里生成快照文件\n});\n```\n\n如果要确认更新快照，需要在控制台选择。 `u`  代表对所有快照进行更新， `i`  代表对单个确认的快照进行更新\n\n### 8.2 测试部分可变变量的内容\n\n```jsx\n// demo.js\nexport const generateConfig = () => {\n  return {\n    server: \"http://localhost\",\n    port: 8080,\n    domain: \"localhost\",\n    time: new Date(),\n    // 可变变量\n    random: Math.random()\n    // 可变变量\n  };\n};\n\n// demo.test.js\nimport { generateConfig } from \"./demo\";\ntest(\"测试 generateConfig\", () => {\n  expect(generateConfig()).toMatchSnapshot({\n    time: expect.any(Date),\n    random: expect.any(Number)\n  });\n});\n```\n\n### 8.3 行内的 snapshot\n\n`npm install prettier --save`\n\n可以快照放到行内的测试用例中\n\n```jsx\n// demo.js\nexport const generateConfig = () => {\n  return {\n    server: \"http://localhost\",\n    port: 8080,\n    domain: \"localhost\",\n    time: new Date(),\n    // 可变变量\n    random: Math.random()\n    // 可变变量\n  };\n};\n\n// demo.test.js\nimport { generateConfig } from \"./demo\";\ntest(\"测试 generateConfig\", () => {\n  // toMatchInlineSnapshot 可以快照放到行内的测试用例中\n  expect(generateConfig()).toMatchInlineSnapshot({\n    time: expect.any(Date),\n    random: expect.any(Number)\n  });\n});\n```\n\n---\n\n## 9. Test Driven Development(TDD) 测试驱动开发\n\n### 9.1 TDD 开发流程\n\n1. 编写测试用例（知道功能，先写测试用例）\n2. 运行测试，测试用例无法通过测试\n3. 编写代码，使测试用例通过测试\n4. 优化代码， 完成开发\n5. 新增功能，重复执行 1-4\n\n### 9.2 TDD 的优势\n\n1. 长期减少项目的回归 bug（减少修改代码产生的 bug）\n2. 代码质量更好（组织，可维护性好）\n3. 测试覆盖率高（因为是先编写测试用例，但测试覆盖率过高会影响很大精力）\n4. 错误测试代码不容易出现\n\n### 9.3 TDD 的适用场景\n\n1. 不适用于开发业务代码时使用（开发业务代码时会大量的与业务代码产生耦合，加大工作量）\n2. 适用于一些库的开发（开发库时代码耦合度较低，通常只处理函数等相关功能）\n\n---\n\n## 10. Behavior Driven Development(BDD) 行为驱动开发\n\n### 10.1 BDD 开发流程\n\n1. 先编写业务代码，不关心测试\n2. 思考并描述用户行为\n3. 根据用户行为模拟测试\n\n### 10.2 vue example\n\n```jsx\n/// testUtils.js\nexport const findTestWrapper = (wrapper, tag) => {\n  return wrapper.find(`[data-test=\"${tag}\"]`);\n};\n```\n\n```jsx\n/// __tests__/integration/TodoList.test.js\nimport { mount } from \"@vue/test-utils\";\nimport { findTestWrapper } from \"../../../../utils/testUtils\";\nimport TodoList from \"../../TodoList\";\n// import store from \"../../../../store\"\nit(`    \n 新增内容逻辑的集成测试    \n 1. 用户会在header输入框输入内容    \n 2. 用户会点击回车按钮  \n 3. 列表项应该增加用户输入内容的列表项`, () => {\n  const wrapper = mount(TodoList);\n  // const wrapper = mount(TodoList, { store })\n  // 如果使用 vuex，也几乎无改动\n  const inputElem = findTestWrapper(wrapper, \"header-input\").at(0);\n  const content = \"Dell lee\";\n  inputElem.setValue(content);\n  inputElem.trigger(\"change\");\n  inputElem.trigger(\"keyup.enter\");\n  const listItems = findTestWrapper(wrapper, \"list-item\").at(0);\n  expect(listItems.length).toBe(1);\n  expect(listItems.at(0).text()).toContain(content);\n});\n```\n\n### 10.3 react example\n\n```jsx\n/// testUtils.js\nexport const findTestWrapper = (wrapper, tag) => {\n  return wrapper.find(`[data-test=\"${tag}\"]`);\n};\n```\n\n```jsx\n/// __tests__/integration/TodoList.test.js\nimport React from \"react\";\n// import { Provider } from \"react-redux\";\nimport Enzyme, { mount } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nimport TodoList from \"../../TodoList\";\n// import store from \"../../../../store/createStore\";\nEnzyme.configure({ adapter: new Adapter() });\n\nit(`\n    新增内容逻辑的集成测试\n    1. 用户会在header输入框输入内容\n    2. 用户会点击回车按钮\n   3. 列表项应该增加用户输入内容的列表项\n`, () => {\n  const wrapper = mount(<TodoList />);\n  /** \n  const wrapper = mount(\n   <Provider store={store}>\n    <TodoList /></Provider>\n   </Provider>\n  )  \n  // 如果使用 redux，也几乎无改动\n */\n  const inputElem = findTestWrapper(wrapper, \"header-input\");\n  const content = \"Dell lee\";\n  inputElem.simulate(\"change\", { target: { value: content } });\n  inputElem.simulate(\"keyUp\", { keyCode: 13 });\n  const listItems = findTestWrapper(wrapper, \"list-item\");\n  expect(listItems.length).toBe(1);\n  expect(listItems.text()).toContain(content);\n});\n```\n\n---\n\n## 11. TDD 和 BDD 的对比\n\n1. `TDD` 先写测试后写代码; `BDD` 先写代码后写测试\n2. `TDD` 创建的是 `unit` 单元测试文件夹，一般结合单元测试，属于白盒测试(知道实现测试代码); `BDD` 创建的是 `integration` 集成测试文件夹，一般结合集成测试，属于黑盒测试(不知道实现测试代码)\n3. `TDD` 测试重点在代码; `BDD` 测试重点在 `UI` ( `DOM`)\n4. `TDD` 安全感低(无法保证各个组件拼撞到一起是否不会有问题); `BDD` 安全感高\n5. `TDD` 速度快; `BDD` 速度慢\n\n---\n\n## 12. TDD 与 BDD 混用\n\n### 12.1 对一些工具函数的测试\n\n### 12.2 对 vuex 的 store 进行测试\n\n```jsx\n/// __tests__/unit/store.test.js\nimport store from \"../../../../store\";\nit(\"当 store 接受 changeInputValue 的 commit 时, inputValue 发生变化\", () => {\n  const value = \"123\";\n  store.commit(\"changeInputValue\", value);\n  expect(store.state.inputValue).toBe(value);\n});\n```\n\n### 12.3 对 redux 的 store 进行测试\n\n```jsx\n/// __tests__/unit/store.test.js\nimport store from \"../../../../store/createStore\";\nimport { changeInputValue } from \"../../../../store/actions\";\nit(\"当 store 接受 changeInputValue 的 dispatch 时, inputValue 发生变化\", () => {\n  const value = \"123\";\n  /**   \n  const changeInputValue = (payload) => ({ \n   type: CHANGE_IMPUT_VALUE, payload \n  })   \n */\n  store.dispatch(changeInputValue(value));\n  expect(store.getState().inputValue).toBe(value);\n});\n```\n\n---\n\n## 13. 异步测试\n\n注意：异步测试如果用到了异步函数，则需要调用 `done`  函数\n\n### 13.1 vue 的异步测试\n\n```javascript\n/// __mocks__/axios.js\nconst undoList = {  success: true,  data: [\n { status: \"div\", value: \"dell\" },\n { status: \"div\", value: \"lee\" }\n]};\nexport default {\n get(url) {\n  if (url === \"/getUndoList.json\") {\n   return new Promise((resolve, reject) => {\n    if (this.success === true) {\n     resolve(undoList);\n    } else {\n     reject(new Error());\n    }\n   });\n  }\n }};\n\n/// __tests__/integration/TodoList.test.js\nimport { mount } from \"@vue/test-utils\";\nimport { findTestWrapper } from \"../../../../utils/testUtils\";\nimport TodoList from \"../../TodoList\";\nimport store from \"../../../../store\";\n\nbeforeEach(() => {\n axios.success = true;\n jest.useFakeTimers(); // 写在钩子函数中的意义是为了清除统计次数，重新开始，防止上一个测试用例对下一个测试用例产生影响});\nit(`1. 用户进入页面时，请求远程测试; 2. 列表应该显示远程返回的数据`, done => {\n  const wrapper = mount(TodoList, { store });\n  wrapper.vm.$nickTick(() => {\n   const listItems = findTestWrapper(wrapper, \"list-item\");\n   expect(listItems.length).toBe(2);\n   done();\n  });\n });\nit(`1. 用户进入页面时，等待5s; 2. 列表应该显示远程返回的数据`, done => {\n const wrapper = mount(TodoList, { store });\n expect(setTimeout).toHaveBeenCalledTimes(1); // 至少执行一次定时器\n jest.runAllTimers();\n wrapper.vm.$nickTick(() => {\n  const listItems = findTestWrapper(wrapper, \"list-item\");\n  expect(listItems.length).toBe(2);\n  done();\n });\n});\n\nit(`1. 用户进入页面时，请求远程数据失败; 2. 列表应该显示空数据，不应该挂掉`, done => {\n axios.success = false;\n const wrapper = mount(TodoList, { store });\n expect(setTimeout).toHaveBeenCalledTimes(1); // 至少执行一次定时器\n jest.runAllTimers();\n wrapper.vm.$nickTick(() => {\n  const listItems = findTestWrapper(wrapper, \"list-item\");\n  expect(listItems.length).toBe(0);\n  done();\n });\n});\n```\n\n### 13.2 react 的异步测试\n\n```jsx\n/// __mocks__/axios.js\nconst undoList = {\n  success: true,\n  data: [\n    { status: \"div\", value: \"dell\" },\n    { status: \"div\", value: \"lee\" }\n  ]\n};\n\nexport default {\n  get(url) {\n    if (url === \"/getUndoList.json\") {\n      return new Promise((resolve, reject) => {\n        if (this.success === true) {\n          resolve(undoList);\n        } else {\n          reject(new Error());\n        }\n      });\n    }\n  }\n};\n\n/// __tests__/integration/TodoList.test.js\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport Enzyme, { mount } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nimport TodoList from \"../../TodoList\";\nimport store from \"../../../../store/createStore\";\nEnzyme.configure({ adapter: new Adapter() });\n\nbeforeEach(() => {\n  axios.success = true;\n  jest.useFakeTimers(); // 写在钩子函数中的意义是为了清除统计次数，重新开始，防止上一个测试用例对下一个测试用例产生影响\n});\n\nit(`\n    1. 用户进入页面时，请求远程测试\n    2. 列表应该显示远程返回的数据\n`, done => {\n  const wrapper = mount(\n    <Provider store={store}>\n      <TodoList />\n    </Provider>\n  );\n  process.nickTick(() => {\n    wrapper.update();\n    const listItems = findTestWrapper(wrapper, \"list-item\");\n    expect(listItems.length).toBe(2);\n    done();\n  });\n});\n\nit(`\n    1. 用户进入页面时，等待5s\n    2. 列表应该显示远程返回的数据\n`, done => {\n  const wrapper = mount(\n    <Provider store={store}>\n      <TodoList />\n    </Provider>\n  );\n  expect(setTimeout).toHaveBeenCalledTimes(1); // 至少执行一次定时器\n  jest.runAllTimers();\n  process.nickTick(() => {\n    wrapper.update(); // 更新 wrapper 防止取上一次的 wrapper\n    const listItems = findTestWrapper(wrapper, \"list-item\");\n    expect(listItems.length).toBe(2);\n    done();\n  });\n});\n\nit(`\n  1. 用户进入页面时，请求远程数据失败\n  2. 列表应该显示空数据，不应该挂掉\n`, done => {\n  axios.success = false;\n  const wrapper = mount(\n    <Provider store={store}>\n      <TodoList />\n    </Provider>\n  );\n  expect(setTimeout).toHaveBeenCalledTimes(1); // 至少执行一次定时器\n  jest.runAllTimers();\n  process.nickTick(() => {\n    wrapper.update();\n    const listItems = findTestWrapper(wrapper, \"list-item\");\n    expect(listItems.length).toBe(0);\n    done();\n  });\n});\n```\n\n---\n\n## 14. vue 项目的自动化测试\n\n### 14.1 使用传统方式对 vue 组件进行测试\n\n```jsx\n// HelloWorld.test.js\nimport Vue from \"vue\";\nimport HelloWorld from \"@/components/HelloWorld\";\ndescribe(\"HelloWorld.vue\", () => {\n  it(\"renders props.msg when passed\", () => {\n    const root = document.createElement(\"div\");\n    root.className = \"root\";\n    document.body.appendChild(root);\n    new Vue({\n      render: h =>\n        h(HelloWorld, {\n          props: {\n            msg: \"dell lee\"\n          }\n        })\n    }).$mount(\".root\");\n    expect(document.getElementByClassName(\"hello\").length).toBe(1);\n  });\n});\n```\n\n缺点：写法过于复杂，局限性也很大，部分属性无法进行测试\n\n### 14.2 使用 @vue/test-utils 对 vue 组件进行测试\n\n- [官方文档](https://vue-test-utils.vuejs.org/zh/)\n\n### 14.2.1 for example\n\n```jsx\n// HelloWorld.test.js\nimport { shallowMount } from \"@vue/test-utils\";\nimport HelloWorld from \"@/components/HelloWorld\";\ndescribe(\"HelloWorld.vue\", () => {\n  it(\"renders props.msg when passed\", () => {\n    const msg = \"dell lee\";\n    const wrapper = shallowMount(HelloWorld, {\n      propsData: { msg }\n    });\n    expect(wrapper.text()).toMatch(msg);\n  });\n});\n```\n\n### 14.2.2 快照测试\n\n使用场景: 一般用于测试组件正常渲染，而不测试组件功能时使用。比如对样式和布局的修改做监听\n\n好处: 可以帮助我们及时发现组件中 `dom` 结构的变化\n\n```jsx\n// HelloWorld.test.js\nimport { shallowMount } from \"@vue/test-utils\";\nimport HelloWorld from \"@/components/HelloWorld\";\ndescribe(\"HelloWorld.vue 组件渲染正常\", () => {\n  it(\"renders props.msg when passed\", () => {\n    const msg = \"dell lee\";\n    const wrapper = shallowMount(HelloWorld, {\n      propsData: { msg }\n    });\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n```\n\n---\n\n## 15. react 项目的自动化测试\n\n### 15.1 使用传统方式对 react 组件进行测试\n\n```jsx\n// App.test.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nit(\"render App\", () => {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(<App />, div);\n  const container = div.getElementsByClassName(\"App\");\n  expect(container.length).toBe(1);\n});\n```\n\n缺点：写法过于复杂，局限性也很大，部分属性无法进行测试\n\n### 15.2 enzyme 的配置和使用\n\n- [官方文档](https://enzymejs.github.io/enzyme/)\n- [github](https://github.com/enzymejs/enzyme)\n- [jest-enzyme](https://github.com/enzymejs/enzyme-matchers/tree/master/packages/jest-enzyme)\n\n### 15.2.1 for example\n\n```jsx\n// App.test.js\nimport React from \"react\";\nimport Enzyme, { shallow } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nimport App from \"App\";\nEnzyme.configure({ adapter: new Adapter() });\nit(\"render App\", () => {\n  const wrapper = shallow(<App />);\n  expect(wrapper.find('[data-test=\"App\"]').length).toBe(2);\n});\n```\n\n使用自定义 `props` 可以降低代码耦合度\n\n`shallow` 适合单元测试，属于浅渲染； `mount` 适合集成测试，会将当前组件包括其子组件一起渲染\n\n单元测试时更倾向于使用 `api` `.state()` ；集成测试时更倾向于使用 `api` `.prop()`\n\n### 15.2.2 快照测试\n\n使用场景: 一般用于测试组件正常渲染，而不测试组件功能时使用。比如对样式和布局的修改做监听\n\n好处: 可以帮助我们及时发现组件中 `dom` 结构的变化\n\n```jsx\n// App.test.js\nimport React from \"react\";\nimport Enzyme, { shallow } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nimport App from \"App\";\nEnzyme.configure({ adapter: new Adapter() });\nit(\"render App\", () => {\n  const wrapper = shallow(<App />);\n  expect(wrapper).toMatchSnapshot();\n});\n```\n\n---\n\n## 16. 前端自动化测试的优势\n\n- 更好的代码组织，项目的可维护性强\n- 更少的 `Bug` 出现概率，尤其是回归测试中的 `Bug`\n- 修改工程质量差的项目，更加安全\n- 项目具备潜在的文档特性\n- 扩展前端的知识面\n\n## 17 总结重要的点\n\n1. `BDD` 和 `TDD`\n2. 集成测试 和 单元测试\n3. 测试和业务的解耦\n4. 代码测试覆盖率并不代表一定靠谱\n5. 功能性测试 和 `UI`测试\n6. 测试越独立，隐藏的问题就越多\n","source":"_posts/大前端/前端自动化测试.md","raw":"---\ntitle: 前端自动化测试\ndate: 2021-04-06\ncategories: [大前端]\ntags: \n  - 测试\n---\n\n在前端大型项目开发的过程中，自动化测试都是不可缺少的一环。自动化测试不但可以降低 bug 出现的频率，也可让项目更加健壮\n\n<!-- more -->\n\n# 前端自动化测试\n\n## 1. 单元测试\n\n对软件中的最小可测试单元进行检查和验证，在前端一般为一个模块。\n\n### 1.1 单元测试的优缺点\n\n1. 测试覆盖率高\n2. 业务耦合度高\n3. 代码量大\n4. 过于独立\n\n### 1.2 总结\n\n在某些场景下适合适用单元测试，某些场景下不适合适用单元测试\n\n## 2. 集成测试\n\n又叫组装测试或联合测试，在单元测试的基础上，将所有模块按照设计要求（如根据结构图）组装成为子系统或系统，进行集成测试。\n\n## 3. jest 中的匹配器\n\n[jest 匹配器官网](https://jestjs.io/docs/en/expect)\n\n修改 `jest`  默认配置命令 `npx jest --init`\n\n### 3.1 实时监听测试用例的改变\n\n`jest --watchAll` 一旦某个测试用例发生变化，所有的测试用例都将会重新执行\n\n`jest --watch`  默认进入 `o`  模式，即只对发生变化的测试用例重新执行\n\n### 3.2 常用匹配器\n\n### 3.2.1 toBe()\n\n```jsx\ntest(\"测试toBe的匹配器\", () => {\n  const a = { name: \"张三\" };\n  expect(a).toBe({ name: \"张三\" });\n});\n// ❌ 因为引用类型使用toBe不是全等效果\n```\n\n`toBe` 匹配器类似于 `===`。\n\n---\n\n### 3.2.2 toEqual()\n\n```jsx\ntest(\"测试toEqual的匹配器\", () => {\n  const a = { name: \"张三\" };\n  expect(a).toBe({ name: \"张三\" });\n});\n// ✅ 因为toEqual只是对结果的匹配，而不是全等效果\n```\n\n`toEqual` 匹配器只是对结果相等与否进行匹配\n\n---\n\n### 3.2.3 toBeNull()\n\n```jsx\ntest(\"测试toBeNull的匹配器\", () => {\n  const a = null;\n  expect(a).toBeNull();\n});\n// ✅\n```\n\n`toBeNull` 是对 `null` 值的匹配\n\n---\n\n### 3.2.4 toBeUndefined()\n\n```jsx\ntest(\"测试toBeUndefined的匹配器\", () => {\n  const a = undefined;\n  expect(a).toBeUndefined();\n});\n// ✅\n```\n\n`toBeUndefined` 是对 `undefined` 值的匹配\n\n---\n\n### 3.2.5 toBeDefined()\n\n```jsx\ntest(\"测试toBeDefined的匹配器\", () => {\n  const a = 1;\n  expect(a).toBeDefined();\n});\n// ✅\n```\n\n`toBeDefined` 是对已经定义的值的匹配，若为 `undefined` 则不通过\n\n---\n\n### 3.2.6 toBeTruthy()\n\n```jsx\ntest(\"测试toBeTruthy的匹配器\", () => {\n  const a = 0;\n  expect(a).toBeTruthy();\n});\n// 0 => ❌，因为 toBeTruthy 是对 true 值的匹配\n// 1 => ✅\n```\n\n`toBeTruthy` 是对 `true` 值的匹配\n\n---\n\n### 3.2.7 toBeFalsy()\n\n```jsx\ntest(\"测试toBeFalsy的匹配器\", () => {\n  const a = 1;\n  expect(a).toBeFalsy();\n});\n// 1 => ❌\n// 0 => ✅\n```\n\n`toBeFalsy` 是对 `false` 值的匹配\n\n---\n\n### 3.2.8 toBeGreaterThan()\n\n```jsx\ntest(\"测试toBeGreaterThan匹配器\", () => {\n  const count = 10;\n  expect(a).toBeGreaterThan(9);\n});\n// ✅\n```\n\n`toBeGreaterThan` 相当于 `>`\n\n---\n\n### 3.2.9 toBeLessThan()\n\n```jsx\ntest(\"测试toBeLessThan匹配器\", () => {\n  const count = 8;\n  expect(a).toBeLessThan(9);\n});\n// ✅\n```\n\n`toBeLessThan` 相当于 `<`\n\n---\n\n### 3.2.10 toBeGreaterThanOrEqual()\n\n```jsx\ntest(\"测试toBeGreaterThanOrEqual匹配器\", () => {\n  const count = 10;\n  expect(a).toBeGreaterThanOrEqual(10);\n});\n// ✅\n```\n\n`toBeGreaterThanOrEqual` 相当于 `>=`\n\n---\n\n### 3.2.11 toBeLessThanOrEqual()\n\n```jsx\ntest(\"测试toBeLessThanOrEqual匹配器\", () => {\n  const count = 10;\n  expect(a).toBeLessThanOrEqual(10);\n});\n// ✅\n```\n\n`toBeLessThanOrEqual` 相当于 `<=`\n\n---\n\n### 3.2.12 toBeCloseTo()\n\n```jsx\ntest(\"测试toBeCloseTo匹配器\", () => {\n  const one = 0.1;\n  const two = 0.2;\n  expect(one + two).toEqual(0.3);\n});\n// ❌ 因为浮点精度不同\n\ntest(\"测试toBeCloseTo匹配器\", () => {\n  const one = 0.1;\n  const two = 0.2;\n  expect(one + two).toBeCloseTo(0.3);\n});\n// ✅\n```\n\n`toBeCloseTo` 为了解决浮点精度不同导致的无法匹配的问题\n\n---\n\n### 3.2.13 toMatch()\n\n```jsx\ntest(\"测试toMatch匹配器\", () => {\n  const str = \"张三、李四、王五\";\n  expect(str).toMatch(\"李四\");\n});\n// ✅\n\ntest(\"测试toMatch匹配器\", () => {\n  const str = \"张三、李四、王五\";\n  expect(str).toMatch(/李四/);\n});\n// ✅\n```\n\n`toMatch` 为字符串包含匹配器，用来匹配字符串中包含的内容，也可传正则表达式\n\n---\n\n### 3.2.14 toContain()\n\n```jsx\ntest(\"测试toContain匹配器\", () => {\n  const arr = [\"张三\", \"李四\", \"王五\"];\n  expect(arr).toContain(\"张三\");\n});\n// ✅\n\ntest(\"测试toContain匹配器\", () => {\n  const arr = [\"张三\", \"李四\", \"王五\"];\n  const data = new Set(arr);\n  expect(data).toContain(\"张三\");\n});\n```\n\n`toContain` 为数据包含匹器，用来匹配数组中包含的项。同时可完全兼容 `Set` 测试\n\n---\n\n### 3.2.15 toHaveLength()\n\n```jsx\n/// functions.js\nexport default {\n  getIntArray(num) {\n    if (!Number.isInteger(num)) {\n      throw Error('\"getIntArray\"只接受整数类型的参数');\n    }\n    let result = [];\n    for (let i = 0, len = num; i < len; i++) {\n      result.push(i);\n    }\n    return result;\n  }\n};\n\n/// functions.test.js\nimport { getIntArray } from \"../src/functions\";\ntest(\"getIntArray(3)返回的数组长度应该为3\", () => {\n  expect(getIntArray(3)).toHaveLength(3);\n});\n```\n\n`toHaveLength`可以很方便的用来测试字符串和数组类型的长度是否满足预期。\n\n### 3.2.16 toThrow()\n\n```jsx\nconst throwNewErrorFunc = () => {\n  throw new Error(\"this is a new error\");\n};\n\ntest(\"测试toThrow匹配器\", () => {\n  expect(throwNewErrorFunc).toThrow();\n});\n```\n\n`toThrow` 是专门对异常进行处理的匹配器，可以检测一个方法会不会抛出异常\n\n```jsx\nconst throwNewErrorFunc = () => {\n  throw new Error(\"this is a new error\");\n};\n\ntest(\"测试toThrow匹配器\", () => {\n  expect(throwNewErrorFunc).toThrow(\"this is a new error\");\n});\n```\n\n我们也可以对这个匹配器中加一些字符串，意思就是抛出的异常必须和字符串相对应，如果字符串不匹配，也没办法通过异常测试。\n\n---\n\n### 3.2.17 not()\n\n```jsx\nconst throwNewErrorFunc = () => {\n  throw new Error(\"this is a new error\");\n};\n\ntest(\"测试not匹配器\", () => {\n  expect(throwNewErrorFunc).not.toThrow();\n});\n```\n\n`not` 匹配器是 `jest` 中比较特殊的匹配器，意思就是 “相反” 或者说 “取反” .比如上面的例子，我们不希望方法抛出异常，就可以使用`not` 匹配器。\n\n---\n\n### 3.3 异步代码测试方法\n\n### 3.3.1 回调函数式\n\n```jsx\n/// fetchData.js\nimport axios from \"axios\";\nexport const fetchData = fn => {\n  axios.get(\"http://a.jspang.com/jestTest.json\").then(res => {\n    fn(res.data);\n  });\n};\n\n/// fetchData.test.js\nimport { fetchData } from \"./fetchData.js\";\ntest(\"fetchData测试\", done => {\n  fetchData(data => {\n    expect(data).toEqual({ success: true });\n    done();\n  });\n});\n```\n\n必须加入一个 `done` 方法，保证我们的回调已经完成了，这时候我们表示测试完成\n\n---\n\n### 3.3.2 直接返回 Promise\n\n```jsx\n/// fetchTwoData.js\nimport axios from \"axios\";\nexport const fetchTwoData = () => axios.get(\"http://a.jspang.com/jestTest.json\";\n\n/// fetchTwoData.test.js\nimport { fetchTwoData } from \"./fetchTwoData.js\";\ntest(\"fetchTwoData的测试用例\", () => {\n return fetchTwoData().then(res => {\n  expect(res.data).toEqual({ success: true });\n });\n});\n```\n\n注意要 `return`\n\n### 3.3.3 不存在的接口\n\n```jsx\n/// fetchData.js\nexport const fetchData = () => {\n  return axios.get(\"http://a.jspang.com/jestTest_error.json\"); // 此地址并不存在\n};\n\n/// fetchData.test.js\n// 方式1\ntest(\"fetchData测试\", () => {\n  expect.assertions(1); // 断言，必须执行一次 expect\n  return fetchData().catch(err => {\n    expect(err.toString().indexOf(\"404\") > -1).toBe(true);\n  });\n});\n\n// 方式2\ntest(\"fetchData测试\", async () => {\n  return await fetchData().rejects.toThrow();\n});\n\n// 方式3\ntest(\"fetchData测试\", async () => {\n  expect().assertions(1); // 断言，必须执行一次 expect\n  try {\n    await fetchData();\n  } catch (err) {\n    expect(err.toString().indexOf(\"404\") > -1).toBe(true);\n  }\n});\n```\n\n因为测试用例使用了 `catch` 方法，也就是说只有出现异常的时候才会走这个方法，而现在没有出现异常，就不会走这个测试方法，`jest` 就默认这个用例通过了测试。因此必须要执行断言，即必须让其执行一次即可。\n\n### 3.3.4 async/await\n\n```jsx\n/// fetchData.js\nexport const fetchData = () => {\n return axios.get(\"http://a.jspang.com/jestTest.json\"); // 此地址并不存在};\n\n/// fetchData.test.js\n// 方式1\ntest(\"fetchData测试\", async () => {\n await expect(fetchData()).resolves.toMatchObject({\n  data: {\n   success: true\n  }\n });\n});\n\n// 方式2\ntest(\"fetchData测试\", async () => {\n const response = await fetchData();\n expect(response.data).toEqual({ success: true });\n});\n```\n\n这时候我们的代码使用 `async....await...` 的形式，这里我们还使用了 `resolves` 用于把现有对象转换成 `Promise` 对象，然后使用 `jest` 中的 `toMatchObject` 进行匹配对象中的属性。\n\n## 4. jest 中的四个钩子函数\n\n### 4.1 beforeAll()\n\n`beforeAll()`钩子函数的意思是在所有测试用例之前进行执行。\n\n### 4.2 afterAll()\n\n`afterAll()`钩子函数是在完成所有测试用例之后才执行的函数。\n\n### 4.3 beforeEach()\n\n`beforeEach()`钩子函数，是在每个测试用例前都会执行一次的钩子函数。\n\n### 4.4 afterEach()\n\n`afterEach()`钩子函数，是在每次测试用例完成测试之后执行一次的钩子函数。\n\n## 5. jest 测试用例分组\n\n```jsx\n/// eat.js\nexport default class Eat {\n  setName(number) {\n    this.name = number === 1 ? \"水饺\" : \"火锅\";\n  }\n  setDesc() {\n    this.desc = this.user + \"描述\";\n  }\n  setMoney() {\n    this.money = this.name === \"水饺\" ? 80 : 300;\n  }\n}\n\n/// eat.test.js\nimport Eat from \"./eat\";\nconst eat = new Eat();\nbeforeAll(() => {\n  console.log(\"开始吃饭\");\n});\nafterAll(() => {\n  console.log(\"吃完饭了\");\n});\ndescribe(\"水饺相关内容\", () => {\n  test(\"测试水饺描述\", () => {\n    eat.setName(1);\n    eat.setDesc();\n    expect(eat.desc).toEqual(\"水饺描述\");\n  });\n  test(\"测试水饺价格\", () => {\n    eat.setName(1);\n    eat.setMoney();\n    expect(eat.money).toEqual(80);\n  });\n});\ndescribe(\"火锅相关内容\", () => {\n  test(\"测试火锅描述\", () => {\n    eat.setName(2);\n    eat.setDesc();\n    expect(eat.desc).toEqual(\"火锅描述\");\n  });\n  test(\"测试火锅价格\", () => {\n    eat.setName(2);\n    eat.setMoney();\n    expect(eat.money).toEqual(300);\n  });\n});\n```\n\n## 6. 钩子函数的作用域\n\n### 6.1 钩子函数在父级分组可作用域子集，类似继承\n\n即父级作用域下的钩子函数在子作用域下也生效\n\n### 6.2 钩子函数同级分组作用域互不干扰，各起作用\n\n同作用域下将都会执行\n\n### 6.3 先执行外部的钩子函数，再执行内部的钩子函数\n\n优先父级作用域下的钩子函数，其次执行子作用域下的钩子函数\n\n### 6.4 在进行测试准备的时候，将对应逻辑写到钩子函数\n\n如果将对应逻辑写到了非钩子函数的位置，那么将会优先执行，然后才会执行钩子函数\n\n### 6.5 对单个测试用例的调试\n\n当一个测试文件中的测试用例变得越来越多的时候，假如此时我们相对其中某一个测试用例进行调试，那么我们就需要使用 `test.only`\n\n```jsx\ntest.only(\"测试用例\", () => {\n  expect(1 + 1).toBe(2);\n});\n```\n\n## 7. Jest 中的 Mock\n\n### 7.1 作用\n\n### 7.1.1 捕获函数的调用和返回结果，以及 `this` 和调用顺序\n\n### 7.1.2 它可以让我们自由的设置返回结果\n\n### 7.1.3 改变内部函数的实现\n\n### 7.2 判定函数是否被调用\n\n```jsx\n// demo.js\nexport const runCallback = callback => {\n  callback();\n};\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  runCallback(func);\n  expect(func).toBeCalled(); // 测试用例被调用\n});\n```\n\n`jest.fn()`  可以帮助我们捕获函数的调用\n\n### 7.3 jest.fn().mock.calls 判定函数被调用了几次和传递的参数\n\n```jsx\n// demo.js\nexport const runCallback = callback => {\n  callback(\"张三\");\n};\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  runCallback(func);\n  runCallback(func);\n  expect(func.mock.calls.length).toBe(2); // 测试用例被调用2次\n  expect(func.mock.calls[0]).toEqual([\"张三\"]); // 测试用例传递的第一个参数是 \"张三\"\n});\n```\n\n此处打印 `func.mock`  将会打印一些常用的方法，可以根据需求进行相应的用例测试\n\n### 7.4 jest.fn().mockReturnValue() 判定函数执行了几次和返回结果\n\n```jsx\n// demo.js\nexport const runCallback = callback => {\n  callback(\"张三\");\n};\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  // func.mockReturnValue(\"Common\")\n  // 所有模拟返回值都是 \"Common\"\n  func.mockReturnValueOnce(\"A\"); // 第一次模拟返回值返回 \"A\"\n  func.mockReturnValueOnce(\"B\"); // 第二次模拟返回值返回 \"B\"\n  func.mockReturnValueOnce(\"C\"); // 第三次模拟返回值返回 \"C\"\n  runCallback(func);\n  runCallback(func);\n  runCallback(func);\n  expect(func.mock.results[0].value).toBe(\"A\");\n  expect(func.mock.results[1].value).toBe(\"B\");\n  expect(func.mock.results[2].value).toBe(\"C\");\n});\n```\n\n`func.mockReturnValue()`  将对所有模拟返回的值生效\n\n`func.mockReturnValueOnce()`  执行到第几次就对第几个函数的模拟返回值生效\n\n支持链式调用\n\n### 7.5 jest.fn().mock.invocationCallOrder 判定函数执行顺序\n\n```jsx\n// demo.js\nexport const runCallback = callback => {\n  callback(\"张三\");\n};\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  runCallback(func);\n  runCallback(func);\n  runCallback(func);\n  expect(func.mock.invocationCallOrder).toEqual([1, 2, 3]);\n});\n```\n\n### 7.6 jest.fn().mock.instances 判定函数调用了几次以及 this 指向\n\n```jsx\n// demo.js\nexport const createObject = (ClassItem) => {\n  new ClassItem();\n}\n\n// demo.test.js\nimport { createObject } from \"./demo\";\ntest(\"测试 createObject\", () => {\n  const func = jest.fn();\n  createObject(func);\n  expect(func.mock.instances).toEqual([mockConstructor{}]); // 此处的 this 就是 mockConstructor\n});\n```\n\n### 7.7 jest.fn().mockImplementation() 判定函数返回结果和其他逻辑处理\n\n```jsx\n// demo.js\nexport const runCallback = callback => {\n  callback(\"张三\");\n};\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  // func.mockImplementation(() => \"hello\"); 等价于 jest.fn(() => \"hello\")\n  // func.mockImplementation(() => this); 等价于 jest.fn().mockReturnThis()\n  func.mockImplementationOnce(() => \"dell\");\n  func.mockImplementationOnce(() => \"lee\");\n  runCallback(func);\n  runCallback(func);\n  runCallback(func);\n  expect(func.mock.results[0].value).toBe(\"dell\");\n  expect(func.mock.results[1].value).toBe(\"lee\");\n});\n```\n\n`mockImplementation`  比 `mockReturnValue`  更健壮，因为内部可以写一些额外的逻辑\n\n### 7.8 toBeCalledWith() 来判定每次函数调用时的参数\n\n```jsx\n// demo.js\nexport const runCallback = (callback) => {\n  callback(\"ABC\");\n}\n\n// demo.test.js\nimport { runCallback } from \"./demo\";\ntest(\"测试 runCallback\", () => {\n  const func = jest.fn();\n  runCallback(func);\n  expect(func.mock.results[0]).toEqual([\"ABC\");\n  expect(func).toBeCalledWith(\"ABC\");\n});\n```\n\n### 7.9 模拟异步请求\n\n对于前端来说一般异步接口是测试是否发送了，而不测试后端接口返回的内容，是属于后端自动化测试的内容\n\n### 7.9.1 通过模拟库的方式来模拟异步测试\n\n```jsx\n// demo.js\nexport const getData = () => {\n  return axios.get(\"/api\").then(res => res.data);\n};\n\n// demo.test.js\nimport axios from \"axios\";\nimport { getData } from \"./demo\";\njest.mock(\"axios\"); // 对 axios 进行模拟，这样就不会请求真正数据\ntest(\"测试 getData\", async () => {\n  axios.get.mockResolvedValue({ data: \"hello\" }); // 使用 axios 请求的时候模拟成功的返回值就是 hello\n  await getData().then(data => {\n    expect(data).toBe(\"hello\");\n  });\n});\n```\n\n`mockResolvedValue` 模拟不限次数\n\n`mockResolvedValueOnce` 模拟一次，模拟两次就会报错，需再次调用\n\n### 7.9.2 通过模拟 Promise 方式模拟异步\n\n```jsx\n// demo.js\nexport const fetchData = () => {\n  return axios.get(\"/\").then(res => res.data);\n};\n\n// __mocks__/demo.js\nexport const fetchData = () => {\n  return new Promise((resolve, reject) => {\n    resolve(\"function() { return '123' }\");\n  });\n};\n\n// demo.test.js\njest.mock(\"./demo\");\nimport { fetchData } from \"./demo\";\ntest(\"测试fetchData\", () => {\n  return fetchData().then(data => {\n    expect(eval(data)).toEqual(\"123\");\n  });\n});\n\n/// 实现方式3\n// 修改jest.config.js 可以自动查找项目内部__mocks__下与要测试文件名字相同的文件做替换\n// 等同于 jest.mock(\"要测试文件名字相同的__mocks__下的文件\"){  automock: true; }\n```\n\n### 7.9.3 通过修改 jest.config.js 来自动识别**mocks**下的文件\n\n修改 `jest.config.js` 可以自动查找项目内部 `__mocks__` 下与要测试文件名字相同的文件做替换\n\n等同于> `jest.mock(\"要测试文件名字相同的__mocks__下的文件\")`\n\n### 7.9.4 使用 jest.unmock() 可取消 mock 模拟\n\n### 7.9.5 解决测试文件中部分功能不需要 mock，部分功能需要 mock 模拟异步的问题\n\n```jsx\n// demo.js\nexport const fetchData = () => {\n  return axios.get(\"/\").then(res => res.data);\n};\nexport const getNumber = () => 123;\n\n// __mocks__/demo.js\nexport const fetchData = () => {\n  return new Promise((resolve, reject) => {\n    resolve(\"function() { return '123' }\");\n  });\n};\n\n// demo.test.js\njest.mock(\"./demo\");\nimport { fetchData } from \"./demo\";\nconst { getNumber } = jest.requireActual(\"./demo\"); // 引入真实文件\ntest(\"测试 fetchData\", () => {\n  return fetchData().then(data => {\n    expect(eval(data)).toEqual(\"123\");\n  });\n});\n\ntest(\"测试 getNumber\", () => {\n  expect(getNumber()).toEqual(123);\n});\n```\n\n## 8. snapshot 快照测试\n\n常用于测试配置文件\n\n### 8.1 toMatchSnapshot()\n\n```jsx\n// demo.js\nexport const generateConfig = () => {\n  return {\n    server: \"http://localhost\",\n    port: 8080,\n    domain: \"localhost\"\n  };\n};\n\n// demo.test.js\nimport { generateConfig } from \"./demo\";\ntest(\"测试 generateConfig\", () => {\n  expect(generateConfig()).toMatchSnapshot(); // 将会在项目里生成快照文件\n});\n```\n\n如果要确认更新快照，需要在控制台选择。 `u`  代表对所有快照进行更新， `i`  代表对单个确认的快照进行更新\n\n### 8.2 测试部分可变变量的内容\n\n```jsx\n// demo.js\nexport const generateConfig = () => {\n  return {\n    server: \"http://localhost\",\n    port: 8080,\n    domain: \"localhost\",\n    time: new Date(),\n    // 可变变量\n    random: Math.random()\n    // 可变变量\n  };\n};\n\n// demo.test.js\nimport { generateConfig } from \"./demo\";\ntest(\"测试 generateConfig\", () => {\n  expect(generateConfig()).toMatchSnapshot({\n    time: expect.any(Date),\n    random: expect.any(Number)\n  });\n});\n```\n\n### 8.3 行内的 snapshot\n\n`npm install prettier --save`\n\n可以快照放到行内的测试用例中\n\n```jsx\n// demo.js\nexport const generateConfig = () => {\n  return {\n    server: \"http://localhost\",\n    port: 8080,\n    domain: \"localhost\",\n    time: new Date(),\n    // 可变变量\n    random: Math.random()\n    // 可变变量\n  };\n};\n\n// demo.test.js\nimport { generateConfig } from \"./demo\";\ntest(\"测试 generateConfig\", () => {\n  // toMatchInlineSnapshot 可以快照放到行内的测试用例中\n  expect(generateConfig()).toMatchInlineSnapshot({\n    time: expect.any(Date),\n    random: expect.any(Number)\n  });\n});\n```\n\n---\n\n## 9. Test Driven Development(TDD) 测试驱动开发\n\n### 9.1 TDD 开发流程\n\n1. 编写测试用例（知道功能，先写测试用例）\n2. 运行测试，测试用例无法通过测试\n3. 编写代码，使测试用例通过测试\n4. 优化代码， 完成开发\n5. 新增功能，重复执行 1-4\n\n### 9.2 TDD 的优势\n\n1. 长期减少项目的回归 bug（减少修改代码产生的 bug）\n2. 代码质量更好（组织，可维护性好）\n3. 测试覆盖率高（因为是先编写测试用例，但测试覆盖率过高会影响很大精力）\n4. 错误测试代码不容易出现\n\n### 9.3 TDD 的适用场景\n\n1. 不适用于开发业务代码时使用（开发业务代码时会大量的与业务代码产生耦合，加大工作量）\n2. 适用于一些库的开发（开发库时代码耦合度较低，通常只处理函数等相关功能）\n\n---\n\n## 10. Behavior Driven Development(BDD) 行为驱动开发\n\n### 10.1 BDD 开发流程\n\n1. 先编写业务代码，不关心测试\n2. 思考并描述用户行为\n3. 根据用户行为模拟测试\n\n### 10.2 vue example\n\n```jsx\n/// testUtils.js\nexport const findTestWrapper = (wrapper, tag) => {\n  return wrapper.find(`[data-test=\"${tag}\"]`);\n};\n```\n\n```jsx\n/// __tests__/integration/TodoList.test.js\nimport { mount } from \"@vue/test-utils\";\nimport { findTestWrapper } from \"../../../../utils/testUtils\";\nimport TodoList from \"../../TodoList\";\n// import store from \"../../../../store\"\nit(`    \n 新增内容逻辑的集成测试    \n 1. 用户会在header输入框输入内容    \n 2. 用户会点击回车按钮  \n 3. 列表项应该增加用户输入内容的列表项`, () => {\n  const wrapper = mount(TodoList);\n  // const wrapper = mount(TodoList, { store })\n  // 如果使用 vuex，也几乎无改动\n  const inputElem = findTestWrapper(wrapper, \"header-input\").at(0);\n  const content = \"Dell lee\";\n  inputElem.setValue(content);\n  inputElem.trigger(\"change\");\n  inputElem.trigger(\"keyup.enter\");\n  const listItems = findTestWrapper(wrapper, \"list-item\").at(0);\n  expect(listItems.length).toBe(1);\n  expect(listItems.at(0).text()).toContain(content);\n});\n```\n\n### 10.3 react example\n\n```jsx\n/// testUtils.js\nexport const findTestWrapper = (wrapper, tag) => {\n  return wrapper.find(`[data-test=\"${tag}\"]`);\n};\n```\n\n```jsx\n/// __tests__/integration/TodoList.test.js\nimport React from \"react\";\n// import { Provider } from \"react-redux\";\nimport Enzyme, { mount } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nimport TodoList from \"../../TodoList\";\n// import store from \"../../../../store/createStore\";\nEnzyme.configure({ adapter: new Adapter() });\n\nit(`\n    新增内容逻辑的集成测试\n    1. 用户会在header输入框输入内容\n    2. 用户会点击回车按钮\n   3. 列表项应该增加用户输入内容的列表项\n`, () => {\n  const wrapper = mount(<TodoList />);\n  /** \n  const wrapper = mount(\n   <Provider store={store}>\n    <TodoList /></Provider>\n   </Provider>\n  )  \n  // 如果使用 redux，也几乎无改动\n */\n  const inputElem = findTestWrapper(wrapper, \"header-input\");\n  const content = \"Dell lee\";\n  inputElem.simulate(\"change\", { target: { value: content } });\n  inputElem.simulate(\"keyUp\", { keyCode: 13 });\n  const listItems = findTestWrapper(wrapper, \"list-item\");\n  expect(listItems.length).toBe(1);\n  expect(listItems.text()).toContain(content);\n});\n```\n\n---\n\n## 11. TDD 和 BDD 的对比\n\n1. `TDD` 先写测试后写代码; `BDD` 先写代码后写测试\n2. `TDD` 创建的是 `unit` 单元测试文件夹，一般结合单元测试，属于白盒测试(知道实现测试代码); `BDD` 创建的是 `integration` 集成测试文件夹，一般结合集成测试，属于黑盒测试(不知道实现测试代码)\n3. `TDD` 测试重点在代码; `BDD` 测试重点在 `UI` ( `DOM`)\n4. `TDD` 安全感低(无法保证各个组件拼撞到一起是否不会有问题); `BDD` 安全感高\n5. `TDD` 速度快; `BDD` 速度慢\n\n---\n\n## 12. TDD 与 BDD 混用\n\n### 12.1 对一些工具函数的测试\n\n### 12.2 对 vuex 的 store 进行测试\n\n```jsx\n/// __tests__/unit/store.test.js\nimport store from \"../../../../store\";\nit(\"当 store 接受 changeInputValue 的 commit 时, inputValue 发生变化\", () => {\n  const value = \"123\";\n  store.commit(\"changeInputValue\", value);\n  expect(store.state.inputValue).toBe(value);\n});\n```\n\n### 12.3 对 redux 的 store 进行测试\n\n```jsx\n/// __tests__/unit/store.test.js\nimport store from \"../../../../store/createStore\";\nimport { changeInputValue } from \"../../../../store/actions\";\nit(\"当 store 接受 changeInputValue 的 dispatch 时, inputValue 发生变化\", () => {\n  const value = \"123\";\n  /**   \n  const changeInputValue = (payload) => ({ \n   type: CHANGE_IMPUT_VALUE, payload \n  })   \n */\n  store.dispatch(changeInputValue(value));\n  expect(store.getState().inputValue).toBe(value);\n});\n```\n\n---\n\n## 13. 异步测试\n\n注意：异步测试如果用到了异步函数，则需要调用 `done`  函数\n\n### 13.1 vue 的异步测试\n\n```javascript\n/// __mocks__/axios.js\nconst undoList = {  success: true,  data: [\n { status: \"div\", value: \"dell\" },\n { status: \"div\", value: \"lee\" }\n]};\nexport default {\n get(url) {\n  if (url === \"/getUndoList.json\") {\n   return new Promise((resolve, reject) => {\n    if (this.success === true) {\n     resolve(undoList);\n    } else {\n     reject(new Error());\n    }\n   });\n  }\n }};\n\n/// __tests__/integration/TodoList.test.js\nimport { mount } from \"@vue/test-utils\";\nimport { findTestWrapper } from \"../../../../utils/testUtils\";\nimport TodoList from \"../../TodoList\";\nimport store from \"../../../../store\";\n\nbeforeEach(() => {\n axios.success = true;\n jest.useFakeTimers(); // 写在钩子函数中的意义是为了清除统计次数，重新开始，防止上一个测试用例对下一个测试用例产生影响});\nit(`1. 用户进入页面时，请求远程测试; 2. 列表应该显示远程返回的数据`, done => {\n  const wrapper = mount(TodoList, { store });\n  wrapper.vm.$nickTick(() => {\n   const listItems = findTestWrapper(wrapper, \"list-item\");\n   expect(listItems.length).toBe(2);\n   done();\n  });\n });\nit(`1. 用户进入页面时，等待5s; 2. 列表应该显示远程返回的数据`, done => {\n const wrapper = mount(TodoList, { store });\n expect(setTimeout).toHaveBeenCalledTimes(1); // 至少执行一次定时器\n jest.runAllTimers();\n wrapper.vm.$nickTick(() => {\n  const listItems = findTestWrapper(wrapper, \"list-item\");\n  expect(listItems.length).toBe(2);\n  done();\n });\n});\n\nit(`1. 用户进入页面时，请求远程数据失败; 2. 列表应该显示空数据，不应该挂掉`, done => {\n axios.success = false;\n const wrapper = mount(TodoList, { store });\n expect(setTimeout).toHaveBeenCalledTimes(1); // 至少执行一次定时器\n jest.runAllTimers();\n wrapper.vm.$nickTick(() => {\n  const listItems = findTestWrapper(wrapper, \"list-item\");\n  expect(listItems.length).toBe(0);\n  done();\n });\n});\n```\n\n### 13.2 react 的异步测试\n\n```jsx\n/// __mocks__/axios.js\nconst undoList = {\n  success: true,\n  data: [\n    { status: \"div\", value: \"dell\" },\n    { status: \"div\", value: \"lee\" }\n  ]\n};\n\nexport default {\n  get(url) {\n    if (url === \"/getUndoList.json\") {\n      return new Promise((resolve, reject) => {\n        if (this.success === true) {\n          resolve(undoList);\n        } else {\n          reject(new Error());\n        }\n      });\n    }\n  }\n};\n\n/// __tests__/integration/TodoList.test.js\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport Enzyme, { mount } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nimport TodoList from \"../../TodoList\";\nimport store from \"../../../../store/createStore\";\nEnzyme.configure({ adapter: new Adapter() });\n\nbeforeEach(() => {\n  axios.success = true;\n  jest.useFakeTimers(); // 写在钩子函数中的意义是为了清除统计次数，重新开始，防止上一个测试用例对下一个测试用例产生影响\n});\n\nit(`\n    1. 用户进入页面时，请求远程测试\n    2. 列表应该显示远程返回的数据\n`, done => {\n  const wrapper = mount(\n    <Provider store={store}>\n      <TodoList />\n    </Provider>\n  );\n  process.nickTick(() => {\n    wrapper.update();\n    const listItems = findTestWrapper(wrapper, \"list-item\");\n    expect(listItems.length).toBe(2);\n    done();\n  });\n});\n\nit(`\n    1. 用户进入页面时，等待5s\n    2. 列表应该显示远程返回的数据\n`, done => {\n  const wrapper = mount(\n    <Provider store={store}>\n      <TodoList />\n    </Provider>\n  );\n  expect(setTimeout).toHaveBeenCalledTimes(1); // 至少执行一次定时器\n  jest.runAllTimers();\n  process.nickTick(() => {\n    wrapper.update(); // 更新 wrapper 防止取上一次的 wrapper\n    const listItems = findTestWrapper(wrapper, \"list-item\");\n    expect(listItems.length).toBe(2);\n    done();\n  });\n});\n\nit(`\n  1. 用户进入页面时，请求远程数据失败\n  2. 列表应该显示空数据，不应该挂掉\n`, done => {\n  axios.success = false;\n  const wrapper = mount(\n    <Provider store={store}>\n      <TodoList />\n    </Provider>\n  );\n  expect(setTimeout).toHaveBeenCalledTimes(1); // 至少执行一次定时器\n  jest.runAllTimers();\n  process.nickTick(() => {\n    wrapper.update();\n    const listItems = findTestWrapper(wrapper, \"list-item\");\n    expect(listItems.length).toBe(0);\n    done();\n  });\n});\n```\n\n---\n\n## 14. vue 项目的自动化测试\n\n### 14.1 使用传统方式对 vue 组件进行测试\n\n```jsx\n// HelloWorld.test.js\nimport Vue from \"vue\";\nimport HelloWorld from \"@/components/HelloWorld\";\ndescribe(\"HelloWorld.vue\", () => {\n  it(\"renders props.msg when passed\", () => {\n    const root = document.createElement(\"div\");\n    root.className = \"root\";\n    document.body.appendChild(root);\n    new Vue({\n      render: h =>\n        h(HelloWorld, {\n          props: {\n            msg: \"dell lee\"\n          }\n        })\n    }).$mount(\".root\");\n    expect(document.getElementByClassName(\"hello\").length).toBe(1);\n  });\n});\n```\n\n缺点：写法过于复杂，局限性也很大，部分属性无法进行测试\n\n### 14.2 使用 @vue/test-utils 对 vue 组件进行测试\n\n- [官方文档](https://vue-test-utils.vuejs.org/zh/)\n\n### 14.2.1 for example\n\n```jsx\n// HelloWorld.test.js\nimport { shallowMount } from \"@vue/test-utils\";\nimport HelloWorld from \"@/components/HelloWorld\";\ndescribe(\"HelloWorld.vue\", () => {\n  it(\"renders props.msg when passed\", () => {\n    const msg = \"dell lee\";\n    const wrapper = shallowMount(HelloWorld, {\n      propsData: { msg }\n    });\n    expect(wrapper.text()).toMatch(msg);\n  });\n});\n```\n\n### 14.2.2 快照测试\n\n使用场景: 一般用于测试组件正常渲染，而不测试组件功能时使用。比如对样式和布局的修改做监听\n\n好处: 可以帮助我们及时发现组件中 `dom` 结构的变化\n\n```jsx\n// HelloWorld.test.js\nimport { shallowMount } from \"@vue/test-utils\";\nimport HelloWorld from \"@/components/HelloWorld\";\ndescribe(\"HelloWorld.vue 组件渲染正常\", () => {\n  it(\"renders props.msg when passed\", () => {\n    const msg = \"dell lee\";\n    const wrapper = shallowMount(HelloWorld, {\n      propsData: { msg }\n    });\n    expect(wrapper).toMatchSnapshot();\n  });\n});\n```\n\n---\n\n## 15. react 项目的自动化测试\n\n### 15.1 使用传统方式对 react 组件进行测试\n\n```jsx\n// App.test.js\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nit(\"render App\", () => {\n  const div = document.createElement(\"div\");\n  ReactDOM.render(<App />, div);\n  const container = div.getElementsByClassName(\"App\");\n  expect(container.length).toBe(1);\n});\n```\n\n缺点：写法过于复杂，局限性也很大，部分属性无法进行测试\n\n### 15.2 enzyme 的配置和使用\n\n- [官方文档](https://enzymejs.github.io/enzyme/)\n- [github](https://github.com/enzymejs/enzyme)\n- [jest-enzyme](https://github.com/enzymejs/enzyme-matchers/tree/master/packages/jest-enzyme)\n\n### 15.2.1 for example\n\n```jsx\n// App.test.js\nimport React from \"react\";\nimport Enzyme, { shallow } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nimport App from \"App\";\nEnzyme.configure({ adapter: new Adapter() });\nit(\"render App\", () => {\n  const wrapper = shallow(<App />);\n  expect(wrapper.find('[data-test=\"App\"]').length).toBe(2);\n});\n```\n\n使用自定义 `props` 可以降低代码耦合度\n\n`shallow` 适合单元测试，属于浅渲染； `mount` 适合集成测试，会将当前组件包括其子组件一起渲染\n\n单元测试时更倾向于使用 `api` `.state()` ；集成测试时更倾向于使用 `api` `.prop()`\n\n### 15.2.2 快照测试\n\n使用场景: 一般用于测试组件正常渲染，而不测试组件功能时使用。比如对样式和布局的修改做监听\n\n好处: 可以帮助我们及时发现组件中 `dom` 结构的变化\n\n```jsx\n// App.test.js\nimport React from \"react\";\nimport Enzyme, { shallow } from \"enzyme\";\nimport Adapter from \"enzyme-adapter-react-16\";\nimport App from \"App\";\nEnzyme.configure({ adapter: new Adapter() });\nit(\"render App\", () => {\n  const wrapper = shallow(<App />);\n  expect(wrapper).toMatchSnapshot();\n});\n```\n\n---\n\n## 16. 前端自动化测试的优势\n\n- 更好的代码组织，项目的可维护性强\n- 更少的 `Bug` 出现概率，尤其是回归测试中的 `Bug`\n- 修改工程质量差的项目，更加安全\n- 项目具备潜在的文档特性\n- 扩展前端的知识面\n\n## 17 总结重要的点\n\n1. `BDD` 和 `TDD`\n2. 集成测试 和 单元测试\n3. 测试和业务的解耦\n4. 代码测试覆盖率并不代表一定靠谱\n5. 功能性测试 和 `UI`测试\n6. 测试越独立，隐藏的问题就越多\n","slug":"大前端/前端自动化测试","published":1,"updated":"2021-04-06T09:59:34.968Z","_id":"ckn5ujhh30000eh7ygegd1dl5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在前端大型项目开发的过程中，自动化测试都是不可缺少的一环。自动化测试不但可以降低 bug 出现的频率，也可让项目更加健壮</p>\n<span id=\"more\"></span>\n\n<h1 id=\"前端自动化测试\"><a href=\"#前端自动化测试\" class=\"headerlink\" title=\"前端自动化测试\"></a>前端自动化测试</h1><h2 id=\"1-单元测试\"><a href=\"#1-单元测试\" class=\"headerlink\" title=\"1. 单元测试\"></a>1. 单元测试</h2><p>对软件中的最小可测试单元进行检查和验证，在前端一般为一个模块。</p>\n<h3 id=\"1-1-单元测试的优缺点\"><a href=\"#1-1-单元测试的优缺点\" class=\"headerlink\" title=\"1.1 单元测试的优缺点\"></a>1.1 单元测试的优缺点</h3><ol>\n<li>测试覆盖率高</li>\n<li>业务耦合度高</li>\n<li>代码量大</li>\n<li>过于独立</li>\n</ol>\n<h3 id=\"1-2-总结\"><a href=\"#1-2-总结\" class=\"headerlink\" title=\"1.2 总结\"></a>1.2 总结</h3><p>在某些场景下适合适用单元测试，某些场景下不适合适用单元测试</p>\n<h2 id=\"2-集成测试\"><a href=\"#2-集成测试\" class=\"headerlink\" title=\"2. 集成测试\"></a>2. 集成测试</h2><p>又叫组装测试或联合测试，在单元测试的基础上，将所有模块按照设计要求（如根据结构图）组装成为子系统或系统，进行集成测试。</p>\n<h2 id=\"3-jest-中的匹配器\"><a href=\"#3-jest-中的匹配器\" class=\"headerlink\" title=\"3. jest 中的匹配器\"></a>3. jest 中的匹配器</h2><p><a href=\"https://jestjs.io/docs/en/expect\">jest 匹配器官网</a></p>\n<p>修改 <code>jest</code>  默认配置命令 <code>npx jest --init</code></p>\n<h3 id=\"3-1-实时监听测试用例的改变\"><a href=\"#3-1-实时监听测试用例的改变\" class=\"headerlink\" title=\"3.1 实时监听测试用例的改变\"></a>3.1 实时监听测试用例的改变</h3><p><code>jest --watchAll</code> 一旦某个测试用例发生变化，所有的测试用例都将会重新执行</p>\n<p><code>jest --watch</code>  默认进入 <code>o</code>  模式，即只对发生变化的测试用例重新执行</p>\n<h3 id=\"3-2-常用匹配器\"><a href=\"#3-2-常用匹配器\" class=\"headerlink\" title=\"3.2 常用匹配器\"></a>3.2 常用匹配器</h3><h3 id=\"3-2-1-toBe\"><a href=\"#3-2-1-toBe\" class=\"headerlink\" title=\"3.2.1 toBe()\"></a>3.2.1 toBe()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBe的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span> &#125;;</span><br><span class=\"line\">  expect(a).toBe(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ❌ 因为引用类型使用toBe不是全等效果</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBe</code> 匹配器类似于 <code>===</code>。</p>\n<hr>\n<h3 id=\"3-2-2-toEqual\"><a href=\"#3-2-2-toEqual\" class=\"headerlink\" title=\"3.2.2 toEqual()\"></a>3.2.2 toEqual()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toEqual的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span> &#125;;</span><br><span class=\"line\">  expect(a).toBe(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅ 因为toEqual只是对结果的匹配，而不是全等效果</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toEqual</code> 匹配器只是对结果相等与否进行匹配</p>\n<hr>\n<h3 id=\"3-2-3-toBeNull\"><a href=\"#3-2-3-toBeNull\" class=\"headerlink\" title=\"3.2.3 toBeNull()\"></a>3.2.3 toBeNull()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeNull的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  expect(a).toBeNull();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeNull</code> 是对 <code>null</code> 值的匹配</p>\n<hr>\n<h3 id=\"3-2-4-toBeUndefined\"><a href=\"#3-2-4-toBeUndefined\" class=\"headerlink\" title=\"3.2.4 toBeUndefined()\"></a>3.2.4 toBeUndefined()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeUndefined的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  expect(a).toBeUndefined();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeUndefined</code> 是对 <code>undefined</code> 值的匹配</p>\n<hr>\n<h3 id=\"3-2-5-toBeDefined\"><a href=\"#3-2-5-toBeDefined\" class=\"headerlink\" title=\"3.2.5 toBeDefined()\"></a>3.2.5 toBeDefined()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeDefined的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  expect(a).toBeDefined();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeDefined</code> 是对已经定义的值的匹配，若为 <code>undefined</code> 则不通过</p>\n<hr>\n<h3 id=\"3-2-6-toBeTruthy\"><a href=\"#3-2-6-toBeTruthy\" class=\"headerlink\" title=\"3.2.6 toBeTruthy()\"></a>3.2.6 toBeTruthy()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeTruthy的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  expect(a).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 0 =&gt; ❌，因为 toBeTruthy 是对 true 值的匹配</span></span><br><span class=\"line\"><span class=\"comment\">// 1 =&gt; ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeTruthy</code> 是对 <code>true</code> 值的匹配</p>\n<hr>\n<h3 id=\"3-2-7-toBeFalsy\"><a href=\"#3-2-7-toBeFalsy\" class=\"headerlink\" title=\"3.2.7 toBeFalsy()\"></a>3.2.7 toBeFalsy()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeFalsy的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  expect(a).toBeFalsy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1 =&gt; ❌</span></span><br><span class=\"line\"><span class=\"comment\">// 0 =&gt; ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeFalsy</code> 是对 <code>false</code> 值的匹配</p>\n<hr>\n<h3 id=\"3-2-8-toBeGreaterThan\"><a href=\"#3-2-8-toBeGreaterThan\" class=\"headerlink\" title=\"3.2.8 toBeGreaterThan()\"></a>3.2.8 toBeGreaterThan()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeGreaterThan匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">  expect(a).toBeGreaterThan(<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeGreaterThan</code> 相当于 <code>&gt;</code></p>\n<hr>\n<h3 id=\"3-2-9-toBeLessThan\"><a href=\"#3-2-9-toBeLessThan\" class=\"headerlink\" title=\"3.2.9 toBeLessThan()\"></a>3.2.9 toBeLessThan()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeLessThan匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">8</span>;</span><br><span class=\"line\">  expect(a).toBeLessThan(<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeLessThan</code> 相当于 <code>&lt;</code></p>\n<hr>\n<h3 id=\"3-2-10-toBeGreaterThanOrEqual\"><a href=\"#3-2-10-toBeGreaterThanOrEqual\" class=\"headerlink\" title=\"3.2.10 toBeGreaterThanOrEqual()\"></a>3.2.10 toBeGreaterThanOrEqual()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeGreaterThanOrEqual匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">  expect(a).toBeGreaterThanOrEqual(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeGreaterThanOrEqual</code> 相当于 <code>&gt;=</code></p>\n<hr>\n<h3 id=\"3-2-11-toBeLessThanOrEqual\"><a href=\"#3-2-11-toBeLessThanOrEqual\" class=\"headerlink\" title=\"3.2.11 toBeLessThanOrEqual()\"></a>3.2.11 toBeLessThanOrEqual()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeLessThanOrEqual匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">  expect(a).toBeLessThanOrEqual(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeLessThanOrEqual</code> 相当于 <code>&lt;=</code></p>\n<hr>\n<h3 id=\"3-2-12-toBeCloseTo\"><a href=\"#3-2-12-toBeCloseTo\" class=\"headerlink\" title=\"3.2.12 toBeCloseTo()\"></a>3.2.12 toBeCloseTo()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeCloseTo匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> one = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> two = <span class=\"number\">0.2</span>;</span><br><span class=\"line\">  expect(one + two).toEqual(<span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ❌ 因为浮点精度不同</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试toBeCloseTo匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> one = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> two = <span class=\"number\">0.2</span>;</span><br><span class=\"line\">  expect(one + two).toBeCloseTo(<span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeCloseTo</code> 为了解决浮点精度不同导致的无法匹配的问题</p>\n<hr>\n<h3 id=\"3-2-13-toMatch\"><a href=\"#3-2-13-toMatch\" class=\"headerlink\" title=\"3.2.13 toMatch()\"></a>3.2.13 toMatch()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toMatch匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&quot;张三、李四、王五&quot;</span>;</span><br><span class=\"line\">  expect(str).toMatch(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试toMatch匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&quot;张三、李四、王五&quot;</span>;</span><br><span class=\"line\">  expect(str).toMatch(<span class=\"regexp\">/李四/</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toMatch</code> 为字符串包含匹配器，用来匹配字符串中包含的内容，也可传正则表达式</p>\n<hr>\n<h3 id=\"3-2-14-toContain\"><a href=\"#3-2-14-toContain\" class=\"headerlink\" title=\"3.2.14 toContain()\"></a>3.2.14 toContain()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toContain匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>, <span class=\"string\">&quot;王五&quot;</span>];</span><br><span class=\"line\">  expect(arr).toContain(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试toContain匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>, <span class=\"string\">&quot;王五&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr);</span><br><span class=\"line\">  expect(data).toContain(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>toContain</code> 为数据包含匹器，用来匹配数组中包含的项。同时可完全兼容 <code>Set</code> 测试</p>\n<hr>\n<h3 id=\"3-2-15-toHaveLength\"><a href=\"#3-2-15-toHaveLength\" class=\"headerlink\" title=\"3.2.15 toHaveLength()\"></a>3.2.15 toHaveLength()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// functions.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getIntArray</span>(<span class=\"params\">num</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(num)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;&quot;getIntArray&quot;只接受整数类型的参数&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = num; i &lt; len; i++) &#123;</span><br><span class=\"line\">      result.push(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// functions.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getIntArray &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src/functions&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;getIntArray(3)返回的数组长度应该为3&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(getIntArray(<span class=\"number\">3</span>)).toHaveLength(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>toHaveLength</code>可以很方便的用来测试字符串和数组类型的长度是否满足预期。</p>\n<h3 id=\"3-2-16-toThrow\"><a href=\"#3-2-16-toThrow\" class=\"headerlink\" title=\"3.2.16 toThrow()\"></a>3.2.16 toThrow()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throwNewErrorFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;this is a new error&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试toThrow匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(throwNewErrorFunc).toThrow();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>toThrow</code> 是专门对异常进行处理的匹配器，可以检测一个方法会不会抛出异常</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throwNewErrorFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;this is a new error&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试toThrow匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(throwNewErrorFunc).toThrow(<span class=\"string\">&quot;this is a new error&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以对这个匹配器中加一些字符串，意思就是抛出的异常必须和字符串相对应，如果字符串不匹配，也没办法通过异常测试。</p>\n<hr>\n<h3 id=\"3-2-17-not\"><a href=\"#3-2-17-not\" class=\"headerlink\" title=\"3.2.17 not()\"></a>3.2.17 not()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throwNewErrorFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;this is a new error&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试not匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(throwNewErrorFunc).not.toThrow();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>not</code> 匹配器是 <code>jest</code> 中比较特殊的匹配器，意思就是 “相反” 或者说 “取反” .比如上面的例子，我们不希望方法抛出异常，就可以使用<code>not</code> 匹配器。</p>\n<hr>\n<h3 id=\"3-3-异步代码测试方法\"><a href=\"#3-3-异步代码测试方法\" class=\"headerlink\" title=\"3.3 异步代码测试方法\"></a>3.3 异步代码测试方法</h3><h3 id=\"3-3-1-回调函数式\"><a href=\"#3-3-1-回调函数式\" class=\"headerlink\" title=\"3.3.1 回调函数式\"></a>3.3.1 回调函数式</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// fetchData.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">  axios.get(<span class=\"string\">&quot;http://a.jspang.com/jestTest.json&quot;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fn(res.data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// fetchData.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./fetchData.js&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">  fetchData(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(data).toEqual(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>必须加入一个 <code>done</code> 方法，保证我们的回调已经完成了，这时候我们表示测试完成</p>\n<hr>\n<h3 id=\"3-3-2-直接返回-Promise\"><a href=\"#3-3-2-直接返回-Promise\" class=\"headerlink\" title=\"3.3.2 直接返回 Promise\"></a>3.3.2 直接返回 Promise</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// fetchTwoData.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchTwoData = <span class=\"function\">() =&gt;</span> axios.get(<span class=\"string\">&quot;http://a.jspang.com/jestTest.json&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// fetchTwoData.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchTwoData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./fetchTwoData.js&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchTwoData的测试用例&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> fetchTwoData().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  expect(res.data).toEqual(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>注意要 <code>return</code></p>\n<h3 id=\"3-3-3-不存在的接口\"><a href=\"#3-3-3-不存在的接口\" class=\"headerlink\" title=\"3.3.3 不存在的接口\"></a>3.3.3 不存在的接口</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// fetchData.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">&quot;http://a.jspang.com/jestTest_error.json&quot;</span>); <span class=\"comment\">// 此地址并不存在</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// fetchData.test.js</span></span><br><span class=\"line\"><span class=\"comment\">// 方式1</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect.assertions(<span class=\"number\">1</span>); <span class=\"comment\">// 断言，必须执行一次 expect</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(err.toString().indexOf(<span class=\"string\">&quot;404&quot;</span>) &gt; -<span class=\"number\">1</span>).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式2</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetchData().rejects.toThrow();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式3</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  expect().assertions(<span class=\"number\">1</span>); <span class=\"comment\">// 断言，必须执行一次 expect</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    expect(err.toString().indexOf(<span class=\"string\">&quot;404&quot;</span>) &gt; -<span class=\"number\">1</span>).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>因为测试用例使用了 <code>catch</code> 方法，也就是说只有出现异常的时候才会走这个方法，而现在没有出现异常，就不会走这个测试方法，<code>jest</code> 就默认这个用例通过了测试。因此必须要执行断言，即必须让其执行一次即可。</p>\n<h3 id=\"3-3-4-async-await\"><a href=\"#3-3-4-async-await\" class=\"headerlink\" title=\"3.3.4 async/await\"></a>3.3.4 async/await</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// fetchData.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> axios.get(<span class=\"string\">&quot;http://a.jspang.com/jestTest.json&quot;</span>); <span class=\"comment\">// 此地址并不存在&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// fetchData.test.js</span></span><br><span class=\"line\"><span class=\"comment\">// 方式1</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">await</span> expect(fetchData()).resolves.toMatchObject(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">   success: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式2</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\"> expect(response.data).toEqual(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们的代码使用 <code>async....await...</code> 的形式，这里我们还使用了 <code>resolves</code> 用于把现有对象转换成 <code>Promise</code> 对象，然后使用 <code>jest</code> 中的 <code>toMatchObject</code> 进行匹配对象中的属性。</p>\n<h2 id=\"4-jest-中的四个钩子函数\"><a href=\"#4-jest-中的四个钩子函数\" class=\"headerlink\" title=\"4. jest 中的四个钩子函数\"></a>4. jest 中的四个钩子函数</h2><h3 id=\"4-1-beforeAll\"><a href=\"#4-1-beforeAll\" class=\"headerlink\" title=\"4.1 beforeAll()\"></a>4.1 beforeAll()</h3><p><code>beforeAll()</code>钩子函数的意思是在所有测试用例之前进行执行。</p>\n<h3 id=\"4-2-afterAll\"><a href=\"#4-2-afterAll\" class=\"headerlink\" title=\"4.2 afterAll()\"></a>4.2 afterAll()</h3><p><code>afterAll()</code>钩子函数是在完成所有测试用例之后才执行的函数。</p>\n<h3 id=\"4-3-beforeEach\"><a href=\"#4-3-beforeEach\" class=\"headerlink\" title=\"4.3 beforeEach()\"></a>4.3 beforeEach()</h3><p><code>beforeEach()</code>钩子函数，是在每个测试用例前都会执行一次的钩子函数。</p>\n<h3 id=\"4-4-afterEach\"><a href=\"#4-4-afterEach\" class=\"headerlink\" title=\"4.4 afterEach()\"></a>4.4 afterEach()</h3><p><code>afterEach()</code>钩子函数，是在每次测试用例完成测试之后执行一次的钩子函数。</p>\n<h2 id=\"5-jest-测试用例分组\"><a href=\"#5-jest-测试用例分组\" class=\"headerlink\" title=\"5. jest 测试用例分组\"></a>5. jest 测试用例分组</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// eat.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Eat</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setName</span>(<span class=\"params\">number</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = number === <span class=\"number\">1</span> ? <span class=\"string\">&quot;水饺&quot;</span> : <span class=\"string\">&quot;火锅&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setDesc</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.desc = <span class=\"built_in\">this</span>.user + <span class=\"string\">&quot;描述&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setMoney</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.money = <span class=\"built_in\">this</span>.name === <span class=\"string\">&quot;水饺&quot;</span> ? <span class=\"number\">80</span> : <span class=\"number\">300</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// eat.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Eat <span class=\"keyword\">from</span> <span class=\"string\">&quot;./eat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> eat = <span class=\"keyword\">new</span> Eat();</span><br><span class=\"line\">beforeAll(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;开始吃饭&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">afterAll(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;吃完饭了&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">describe(<span class=\"string\">&quot;水饺相关内容&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  test(<span class=\"string\">&quot;测试水饺描述&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    eat.setName(<span class=\"number\">1</span>);</span><br><span class=\"line\">    eat.setDesc();</span><br><span class=\"line\">    expect(eat.desc).toEqual(<span class=\"string\">&quot;水饺描述&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  test(<span class=\"string\">&quot;测试水饺价格&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    eat.setName(<span class=\"number\">1</span>);</span><br><span class=\"line\">    eat.setMoney();</span><br><span class=\"line\">    expect(eat.money).toEqual(<span class=\"number\">80</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">describe(<span class=\"string\">&quot;火锅相关内容&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  test(<span class=\"string\">&quot;测试火锅描述&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    eat.setName(<span class=\"number\">2</span>);</span><br><span class=\"line\">    eat.setDesc();</span><br><span class=\"line\">    expect(eat.desc).toEqual(<span class=\"string\">&quot;火锅描述&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  test(<span class=\"string\">&quot;测试火锅价格&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    eat.setName(<span class=\"number\">2</span>);</span><br><span class=\"line\">    eat.setMoney();</span><br><span class=\"line\">    expect(eat.money).toEqual(<span class=\"number\">300</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-钩子函数的作用域\"><a href=\"#6-钩子函数的作用域\" class=\"headerlink\" title=\"6. 钩子函数的作用域\"></a>6. 钩子函数的作用域</h2><h3 id=\"6-1-钩子函数在父级分组可作用域子集，类似继承\"><a href=\"#6-1-钩子函数在父级分组可作用域子集，类似继承\" class=\"headerlink\" title=\"6.1 钩子函数在父级分组可作用域子集，类似继承\"></a>6.1 钩子函数在父级分组可作用域子集，类似继承</h3><p>即父级作用域下的钩子函数在子作用域下也生效</p>\n<h3 id=\"6-2-钩子函数同级分组作用域互不干扰，各起作用\"><a href=\"#6-2-钩子函数同级分组作用域互不干扰，各起作用\" class=\"headerlink\" title=\"6.2 钩子函数同级分组作用域互不干扰，各起作用\"></a>6.2 钩子函数同级分组作用域互不干扰，各起作用</h3><p>同作用域下将都会执行</p>\n<h3 id=\"6-3-先执行外部的钩子函数，再执行内部的钩子函数\"><a href=\"#6-3-先执行外部的钩子函数，再执行内部的钩子函数\" class=\"headerlink\" title=\"6.3 先执行外部的钩子函数，再执行内部的钩子函数\"></a>6.3 先执行外部的钩子函数，再执行内部的钩子函数</h3><p>优先父级作用域下的钩子函数，其次执行子作用域下的钩子函数</p>\n<h3 id=\"6-4-在进行测试准备的时候，将对应逻辑写到钩子函数\"><a href=\"#6-4-在进行测试准备的时候，将对应逻辑写到钩子函数\" class=\"headerlink\" title=\"6.4 在进行测试准备的时候，将对应逻辑写到钩子函数\"></a>6.4 在进行测试准备的时候，将对应逻辑写到钩子函数</h3><p>如果将对应逻辑写到了非钩子函数的位置，那么将会优先执行，然后才会执行钩子函数</p>\n<h3 id=\"6-5-对单个测试用例的调试\"><a href=\"#6-5-对单个测试用例的调试\" class=\"headerlink\" title=\"6.5 对单个测试用例的调试\"></a>6.5 对单个测试用例的调试</h3><p>当一个测试文件中的测试用例变得越来越多的时候，假如此时我们相对其中某一个测试用例进行调试，那么我们就需要使用 <code>test.only</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test.only(<span class=\"string\">&quot;测试用例&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(<span class=\"number\">1</span> + <span class=\"number\">1</span>).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-Jest-中的-Mock\"><a href=\"#7-Jest-中的-Mock\" class=\"headerlink\" title=\"7. Jest 中的 Mock\"></a>7. Jest 中的 Mock</h2><h3 id=\"7-1-作用\"><a href=\"#7-1-作用\" class=\"headerlink\" title=\"7.1 作用\"></a>7.1 作用</h3><h3 id=\"7-1-1-捕获函数的调用和返回结果，以及-this-和调用顺序\"><a href=\"#7-1-1-捕获函数的调用和返回结果，以及-this-和调用顺序\" class=\"headerlink\" title=\"7.1.1 捕获函数的调用和返回结果，以及 this 和调用顺序\"></a>7.1.1 捕获函数的调用和返回结果，以及 <code>this</code> 和调用顺序</h3><h3 id=\"7-1-2-它可以让我们自由的设置返回结果\"><a href=\"#7-1-2-它可以让我们自由的设置返回结果\" class=\"headerlink\" title=\"7.1.2 它可以让我们自由的设置返回结果\"></a>7.1.2 它可以让我们自由的设置返回结果</h3><h3 id=\"7-1-3-改变内部函数的实现\"><a href=\"#7-1-3-改变内部函数的实现\" class=\"headerlink\" title=\"7.1.3 改变内部函数的实现\"></a>7.1.3 改变内部函数的实现</h3><h3 id=\"7-2-判定函数是否被调用\"><a href=\"#7-2-判定函数是否被调用\" class=\"headerlink\" title=\"7.2 判定函数是否被调用\"></a>7.2 判定函数是否被调用</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  callback();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func).toBeCalled(); <span class=\"comment\">// 测试用例被调用</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>jest.fn()</code>  可以帮助我们捕获函数的调用</p>\n<h3 id=\"7-3-jest-fn-mock-calls-判定函数被调用了几次和传递的参数\"><a href=\"#7-3-jest-fn-mock-calls-判定函数被调用了几次和传递的参数\" class=\"headerlink\" title=\"7.3 jest.fn().mock.calls 判定函数被调用了几次和传递的参数\"></a>7.3 jest.fn().mock.calls 判定函数被调用了几次和传递的参数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  callback(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func.mock.calls.length).toBe(<span class=\"number\">2</span>); <span class=\"comment\">// 测试用例被调用2次</span></span><br><span class=\"line\">  expect(func.mock.calls[<span class=\"number\">0</span>]).toEqual([<span class=\"string\">&quot;张三&quot;</span>]); <span class=\"comment\">// 测试用例传递的第一个参数是 &quot;张三&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此处打印 <code>func.mock</code>  将会打印一些常用的方法，可以根据需求进行相应的用例测试</p>\n<h3 id=\"7-4-jest-fn-mockReturnValue-判定函数执行了几次和返回结果\"><a href=\"#7-4-jest-fn-mockReturnValue-判定函数执行了几次和返回结果\" class=\"headerlink\" title=\"7.4 jest.fn().mockReturnValue() 判定函数执行了几次和返回结果\"></a>7.4 jest.fn().mockReturnValue() 判定函数执行了几次和返回结果</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  callback(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  <span class=\"comment\">// func.mockReturnValue(&quot;Common&quot;)</span></span><br><span class=\"line\">  <span class=\"comment\">// 所有模拟返回值都是 &quot;Common&quot;</span></span><br><span class=\"line\">  func.mockReturnValueOnce(<span class=\"string\">&quot;A&quot;</span>); <span class=\"comment\">// 第一次模拟返回值返回 &quot;A&quot;</span></span><br><span class=\"line\">  func.mockReturnValueOnce(<span class=\"string\">&quot;B&quot;</span>); <span class=\"comment\">// 第二次模拟返回值返回 &quot;B&quot;</span></span><br><span class=\"line\">  func.mockReturnValueOnce(<span class=\"string\">&quot;C&quot;</span>); <span class=\"comment\">// 第三次模拟返回值返回 &quot;C&quot;</span></span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">0</span>].value).toBe(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">1</span>].value).toBe(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">2</span>].value).toBe(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>func.mockReturnValue()</code>  将对所有模拟返回的值生效</p>\n<p><code>func.mockReturnValueOnce()</code>  执行到第几次就对第几个函数的模拟返回值生效</p>\n<p>支持链式调用</p>\n<h3 id=\"7-5-jest-fn-mock-invocationCallOrder-判定函数执行顺序\"><a href=\"#7-5-jest-fn-mock-invocationCallOrder-判定函数执行顺序\" class=\"headerlink\" title=\"7.5 jest.fn().mock.invocationCallOrder 判定函数执行顺序\"></a>7.5 jest.fn().mock.invocationCallOrder 判定函数执行顺序</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  callback(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func.mock.invocationCallOrder).toEqual([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-6-jest-fn-mock-instances-判定函数调用了几次以及-this-指向\"><a href=\"#7-6-jest-fn-mock-instances-判定函数调用了几次以及-this-指向\" class=\"headerlink\" title=\"7.6 jest.fn().mock.instances 判定函数调用了几次以及 this 指向\"></a>7.6 jest.fn().mock.instances 判定函数调用了几次以及 this 指向</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createObject = <span class=\"function\">(<span class=\"params\">ClassItem</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> ClassItem();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createObject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 createObject&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  createObject(func);</span><br><span class=\"line\">  expect(func.mock.instances).toEqual([mockConstructor&#123;&#125;]); <span class=\"comment\">// 此处的 this 就是 mockConstructor</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-7-jest-fn-mockImplementation-判定函数返回结果和其他逻辑处理\"><a href=\"#7-7-jest-fn-mockImplementation-判定函数返回结果和其他逻辑处理\" class=\"headerlink\" title=\"7.7 jest.fn().mockImplementation() 判定函数返回结果和其他逻辑处理\"></a>7.7 jest.fn().mockImplementation() 判定函数返回结果和其他逻辑处理</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  callback(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  <span class=\"comment\">// func.mockImplementation(() =&gt; &quot;hello&quot;); 等价于 jest.fn(() =&gt; &quot;hello&quot;)</span></span><br><span class=\"line\">  <span class=\"comment\">// func.mockImplementation(() =&gt; this); 等价于 jest.fn().mockReturnThis()</span></span><br><span class=\"line\">  func.mockImplementationOnce(<span class=\"function\">() =&gt;</span> <span class=\"string\">&quot;dell&quot;</span>);</span><br><span class=\"line\">  func.mockImplementationOnce(<span class=\"function\">() =&gt;</span> <span class=\"string\">&quot;lee&quot;</span>);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">0</span>].value).toBe(<span class=\"string\">&quot;dell&quot;</span>);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">1</span>].value).toBe(<span class=\"string\">&quot;lee&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>mockImplementation</code>  比 <code>mockReturnValue</code>  更健壮，因为内部可以写一些额外的逻辑</p>\n<h3 id=\"7-8-toBeCalledWith-来判定每次函数调用时的参数\"><a href=\"#7-8-toBeCalledWith-来判定每次函数调用时的参数\" class=\"headerlink\" title=\"7.8 toBeCalledWith() 来判定每次函数调用时的参数\"></a>7.8 toBeCalledWith() 来判定每次函数调用时的参数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  callback(<span class=\"string\">&quot;ABC&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">0</span>]).toEqual([<span class=\"string\">&quot;ABC&quot;</span>);</span><br><span class=\"line\">  expect(func).toBeCalledWith(<span class=\"string\">&quot;ABC&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-9-模拟异步请求\"><a href=\"#7-9-模拟异步请求\" class=\"headerlink\" title=\"7.9 模拟异步请求\"></a>7.9 模拟异步请求</h3><p>对于前端来说一般异步接口是测试是否发送了，而不测试后端接口返回的内容，是属于后端自动化测试的内容</p>\n<h3 id=\"7-9-1-通过模拟库的方式来模拟异步测试\"><a href=\"#7-9-1-通过模拟库的方式来模拟异步测试\" class=\"headerlink\" title=\"7.9.1 通过模拟库的方式来模拟异步测试\"></a>7.9.1 通过模拟库的方式来模拟异步测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">&quot;/api&quot;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">jest.mock(<span class=\"string\">&quot;axios&quot;</span>); <span class=\"comment\">// 对 axios 进行模拟，这样就不会请求真正数据</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 getData&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  axios.get.mockResolvedValue(&#123; <span class=\"attr\">data</span>: <span class=\"string\">&quot;hello&quot;</span> &#125;); <span class=\"comment\">// 使用 axios 请求的时候模拟成功的返回值就是 hello</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> getData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>mockResolvedValue</code> 模拟不限次数</p>\n<p><code>mockResolvedValueOnce</code> 模拟一次，模拟两次就会报错，需再次调用</p>\n<h3 id=\"7-9-2-通过模拟-Promise-方式模拟异步\"><a href=\"#7-9-2-通过模拟-Promise-方式模拟异步\" class=\"headerlink\" title=\"7.9.2 通过模拟 Promise 方式模拟异步\"></a>7.9.2 通过模拟 Promise 方式模拟异步</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">&quot;/&quot;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// __mocks__/demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;function() &#123; return &#x27;123&#x27; &#125;&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\">jest.mock(<span class=\"string\">&quot;./demo&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试fetchData&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"built_in\">eval</span>(data)).toEqual(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 实现方式3</span></span><br><span class=\"line\"><span class=\"comment\">// 修改jest.config.js 可以自动查找项目内部__mocks__下与要测试文件名字相同的文件做替换</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于 jest.mock(&quot;要测试文件名字相同的__mocks__下的文件&quot;)&#123;  automock: true; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-9-3-通过修改-jest-config-js-来自动识别mocks下的文件\"><a href=\"#7-9-3-通过修改-jest-config-js-来自动识别mocks下的文件\" class=\"headerlink\" title=\"7.9.3 通过修改 jest.config.js 来自动识别mocks下的文件\"></a>7.9.3 通过修改 jest.config.js 来自动识别<strong>mocks</strong>下的文件</h3><p>修改 <code>jest.config.js</code> 可以自动查找项目内部 <code>__mocks__</code> 下与要测试文件名字相同的文件做替换</p>\n<p>等同于&gt; <code>jest.mock(&quot;要测试文件名字相同的__mocks__下的文件&quot;)</code></p>\n<h3 id=\"7-9-4-使用-jest-unmock-可取消-mock-模拟\"><a href=\"#7-9-4-使用-jest-unmock-可取消-mock-模拟\" class=\"headerlink\" title=\"7.9.4 使用 jest.unmock() 可取消 mock 模拟\"></a>7.9.4 使用 jest.unmock() 可取消 mock 模拟</h3><h3 id=\"7-9-5-解决测试文件中部分功能不需要-mock，部分功能需要-mock-模拟异步的问题\"><a href=\"#7-9-5-解决测试文件中部分功能不需要-mock，部分功能需要-mock-模拟异步的问题\" class=\"headerlink\" title=\"7.9.5 解决测试文件中部分功能不需要 mock，部分功能需要 mock 模拟异步的问题\"></a>7.9.5 解决测试文件中部分功能不需要 mock，部分功能需要 mock 模拟异步的问题</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">&quot;/&quot;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getNumber = <span class=\"function\">() =&gt;</span> <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// __mocks__/demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;function() &#123; return &#x27;123&#x27; &#125;&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\">jest.mock(<span class=\"string\">&quot;./demo&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; getNumber &#125; = jest.requireActual(<span class=\"string\">&quot;./demo&quot;</span>); <span class=\"comment\">// 引入真实文件</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 fetchData&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"built_in\">eval</span>(data)).toEqual(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 getNumber&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(getNumber()).toEqual(<span class=\"number\">123</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-snapshot-快照测试\"><a href=\"#8-snapshot-快照测试\" class=\"headerlink\" title=\"8. snapshot 快照测试\"></a>8. snapshot 快照测试</h2><p>常用于测试配置文件</p>\n<h3 id=\"8-1-toMatchSnapshot\"><a href=\"#8-1-toMatchSnapshot\" class=\"headerlink\" title=\"8.1 toMatchSnapshot()\"></a>8.1 toMatchSnapshot()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> generateConfig = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    server: <span class=\"string\">&quot;http://localhost&quot;</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    domain: <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; generateConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 generateConfig&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(generateConfig()).toMatchSnapshot(); <span class=\"comment\">// 将会在项目里生成快照文件</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果要确认更新快照，需要在控制台选择。 <code>u</code>  代表对所有快照进行更新， <code>i</code>  代表对单个确认的快照进行更新</p>\n<h3 id=\"8-2-测试部分可变变量的内容\"><a href=\"#8-2-测试部分可变变量的内容\" class=\"headerlink\" title=\"8.2 测试部分可变变量的内容\"></a>8.2 测试部分可变变量的内容</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> generateConfig = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    server: <span class=\"string\">&quot;http://localhost&quot;</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    domain: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">    <span class=\"comment\">// 可变变量</span></span><br><span class=\"line\">    random: <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">    <span class=\"comment\">// 可变变量</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; generateConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 generateConfig&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(generateConfig()).toMatchSnapshot(&#123;</span><br><span class=\"line\">    time: expect.any(<span class=\"built_in\">Date</span>),</span><br><span class=\"line\">    random: expect.any(<span class=\"built_in\">Number</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-行内的-snapshot\"><a href=\"#8-3-行内的-snapshot\" class=\"headerlink\" title=\"8.3 行内的 snapshot\"></a>8.3 行内的 snapshot</h3><p><code>npm install prettier --save</code></p>\n<p>可以快照放到行内的测试用例中</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> generateConfig = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    server: <span class=\"string\">&quot;http://localhost&quot;</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    domain: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">    <span class=\"comment\">// 可变变量</span></span><br><span class=\"line\">    random: <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">    <span class=\"comment\">// 可变变量</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; generateConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 generateConfig&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// toMatchInlineSnapshot 可以快照放到行内的测试用例中</span></span><br><span class=\"line\">  expect(generateConfig()).toMatchInlineSnapshot(&#123;</span><br><span class=\"line\">    time: expect.any(<span class=\"built_in\">Date</span>),</span><br><span class=\"line\">    random: expect.any(<span class=\"built_in\">Number</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"9-Test-Driven-Development-TDD-测试驱动开发\"><a href=\"#9-Test-Driven-Development-TDD-测试驱动开发\" class=\"headerlink\" title=\"9. Test Driven Development(TDD) 测试驱动开发\"></a>9. Test Driven Development(TDD) 测试驱动开发</h2><h3 id=\"9-1-TDD-开发流程\"><a href=\"#9-1-TDD-开发流程\" class=\"headerlink\" title=\"9.1 TDD 开发流程\"></a>9.1 TDD 开发流程</h3><ol>\n<li>编写测试用例（知道功能，先写测试用例）</li>\n<li>运行测试，测试用例无法通过测试</li>\n<li>编写代码，使测试用例通过测试</li>\n<li>优化代码， 完成开发</li>\n<li>新增功能，重复执行 1-4</li>\n</ol>\n<h3 id=\"9-2-TDD-的优势\"><a href=\"#9-2-TDD-的优势\" class=\"headerlink\" title=\"9.2 TDD 的优势\"></a>9.2 TDD 的优势</h3><ol>\n<li>长期减少项目的回归 bug（减少修改代码产生的 bug）</li>\n<li>代码质量更好（组织，可维护性好）</li>\n<li>测试覆盖率高（因为是先编写测试用例，但测试覆盖率过高会影响很大精力）</li>\n<li>错误测试代码不容易出现</li>\n</ol>\n<h3 id=\"9-3-TDD-的适用场景\"><a href=\"#9-3-TDD-的适用场景\" class=\"headerlink\" title=\"9.3 TDD 的适用场景\"></a>9.3 TDD 的适用场景</h3><ol>\n<li>不适用于开发业务代码时使用（开发业务代码时会大量的与业务代码产生耦合，加大工作量）</li>\n<li>适用于一些库的开发（开发库时代码耦合度较低，通常只处理函数等相关功能）</li>\n</ol>\n<hr>\n<h2 id=\"10-Behavior-Driven-Development-BDD-行为驱动开发\"><a href=\"#10-Behavior-Driven-Development-BDD-行为驱动开发\" class=\"headerlink\" title=\"10. Behavior Driven Development(BDD) 行为驱动开发\"></a>10. Behavior Driven Development(BDD) 行为驱动开发</h2><h3 id=\"10-1-BDD-开发流程\"><a href=\"#10-1-BDD-开发流程\" class=\"headerlink\" title=\"10.1 BDD 开发流程\"></a>10.1 BDD 开发流程</h3><ol>\n<li>先编写业务代码，不关心测试</li>\n<li>思考并描述用户行为</li>\n<li>根据用户行为模拟测试</li>\n</ol>\n<h3 id=\"10-2-vue-example\"><a href=\"#10-2-vue-example\" class=\"headerlink\" title=\"10.2 vue example\"></a>10.2 vue example</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// testUtils.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> findTestWrapper = <span class=\"function\">(<span class=\"params\">wrapper, tag</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapper.find(<span class=\"string\">`[data-test=&quot;<span class=\"subst\">$&#123;tag&#125;</span>&quot;]`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __tests__/integration/TodoList.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/test-utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; findTestWrapper &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../utils/testUtils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../TodoList&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import store from &quot;../../../../store&quot;</span></span><br><span class=\"line\">it(<span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\"> 新增内容逻辑的集成测试    </span></span><br><span class=\"line\"><span class=\"string\"> 1. 用户会在header输入框输入内容    </span></span><br><span class=\"line\"><span class=\"string\"> 2. 用户会点击回车按钮  </span></span><br><span class=\"line\"><span class=\"string\"> 3. 列表项应该增加用户输入内容的列表项`</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(TodoList);</span><br><span class=\"line\">  <span class=\"comment\">// const wrapper = mount(TodoList, &#123; store &#125;)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果使用 vuex，也几乎无改动</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputElem = findTestWrapper(wrapper, <span class=\"string\">&quot;header-input&quot;</span>).at(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = <span class=\"string\">&quot;Dell lee&quot;</span>;</span><br><span class=\"line\">  inputElem.setValue(content);</span><br><span class=\"line\">  inputElem.trigger(<span class=\"string\">&quot;change&quot;</span>);</span><br><span class=\"line\">  inputElem.trigger(<span class=\"string\">&quot;keyup.enter&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>).at(<span class=\"number\">0</span>);</span><br><span class=\"line\">  expect(listItems.length).toBe(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect(listItems.at(<span class=\"number\">0</span>).text()).toContain(content);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-3-react-example\"><a href=\"#10-3-react-example\" class=\"headerlink\" title=\"10.3 react example\"></a>10.3 react example</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// testUtils.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> findTestWrapper = <span class=\"function\">(<span class=\"params\">wrapper, tag</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapper.find(<span class=\"string\">`[data-test=&quot;<span class=\"subst\">$&#123;tag&#125;</span>&quot;]`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __tests__/integration/TodoList.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import &#123; Provider &#125; from &quot;react-redux&quot;;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Enzyme, &#123; mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme-adapter-react-16&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../TodoList&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import store from &quot;../../../../store/createStore&quot;;</span></span><br><span class=\"line\">Enzyme.configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter() &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    新增内容逻辑的集成测试</span></span><br><span class=\"line\"><span class=\"string\">    1. 用户会在header输入框输入内容</span></span><br><span class=\"line\"><span class=\"string\">    2. 用户会点击回车按钮</span></span><br><span class=\"line\"><span class=\"string\">   3. 列表项应该增加用户输入内容的列表项</span></span><br><span class=\"line\"><span class=\"string\">`</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span> /&gt;</span></span>);</span><br><span class=\"line\">  <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">  const wrapper = mount(</span></span><br><span class=\"line\"><span class=\"comment\">   &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;TodoList /&gt;&lt;/Provider&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   &lt;/Provider&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  )  </span></span><br><span class=\"line\"><span class=\"comment\">  // 如果使用 redux，也几乎无改动</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputElem = findTestWrapper(wrapper, <span class=\"string\">&quot;header-input&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = <span class=\"string\">&quot;Dell lee&quot;</span>;</span><br><span class=\"line\">  inputElem.simulate(<span class=\"string\">&quot;change&quot;</span>, &#123; <span class=\"attr\">target</span>: &#123; <span class=\"attr\">value</span>: content &#125; &#125;);</span><br><span class=\"line\">  inputElem.simulate(<span class=\"string\">&quot;keyUp&quot;</span>, &#123; <span class=\"attr\">keyCode</span>: <span class=\"number\">13</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">  expect(listItems.length).toBe(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect(listItems.text()).toContain(content);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"11-TDD-和-BDD-的对比\"><a href=\"#11-TDD-和-BDD-的对比\" class=\"headerlink\" title=\"11. TDD 和 BDD 的对比\"></a>11. TDD 和 BDD 的对比</h2><ol>\n<li><code>TDD</code> 先写测试后写代码; <code>BDD</code> 先写代码后写测试</li>\n<li><code>TDD</code> 创建的是 <code>unit</code> 单元测试文件夹，一般结合单元测试，属于白盒测试(知道实现测试代码); <code>BDD</code> 创建的是 <code>integration</code> 集成测试文件夹，一般结合集成测试，属于黑盒测试(不知道实现测试代码)</li>\n<li><code>TDD</code> 测试重点在代码; <code>BDD</code> 测试重点在 <code>UI</code> ( <code>DOM</code>)</li>\n<li><code>TDD</code> 安全感低(无法保证各个组件拼撞到一起是否不会有问题); <code>BDD</code> 安全感高</li>\n<li><code>TDD</code> 速度快; <code>BDD</code> 速度慢</li>\n</ol>\n<hr>\n<h2 id=\"12-TDD-与-BDD-混用\"><a href=\"#12-TDD-与-BDD-混用\" class=\"headerlink\" title=\"12. TDD 与 BDD 混用\"></a>12. TDD 与 BDD 混用</h2><h3 id=\"12-1-对一些工具函数的测试\"><a href=\"#12-1-对一些工具函数的测试\" class=\"headerlink\" title=\"12.1 对一些工具函数的测试\"></a>12.1 对一些工具函数的测试</h3><h3 id=\"12-2-对-vuex-的-store-进行测试\"><a href=\"#12-2-对-vuex-的-store-进行测试\" class=\"headerlink\" title=\"12.2 对 vuex 的 store 进行测试\"></a>12.2 对 vuex 的 store 进行测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __tests__/unit/store.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../store&quot;</span>;</span><br><span class=\"line\">it(<span class=\"string\">&quot;当 store 接受 changeInputValue 的 commit 时, inputValue 发生变化&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">  store.commit(<span class=\"string\">&quot;changeInputValue&quot;</span>, value);</span><br><span class=\"line\">  expect(store.state.inputValue).toBe(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-3-对-redux-的-store-进行测试\"><a href=\"#12-3-对-redux-的-store-进行测试\" class=\"headerlink\" title=\"12.3 对 redux 的 store 进行测试\"></a>12.3 对 redux 的 store 进行测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __tests__/unit/store.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../store/createStore&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; changeInputValue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../store/actions&quot;</span>;</span><br><span class=\"line\">it(<span class=\"string\">&quot;当 store 接受 changeInputValue 的 dispatch 时, inputValue 发生变化&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">/**   </span></span><br><span class=\"line\"><span class=\"comment\">  const changeInputValue = (payload) =&gt; (&#123; </span></span><br><span class=\"line\"><span class=\"comment\">   type: CHANGE_IMPUT_VALUE, payload </span></span><br><span class=\"line\"><span class=\"comment\">  &#125;)   </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">  store.dispatch(changeInputValue(value));</span><br><span class=\"line\">  expect(store.getState().inputValue).toBe(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"13-异步测试\"><a href=\"#13-异步测试\" class=\"headerlink\" title=\"13. 异步测试\"></a>13. 异步测试</h2><p>注意：异步测试如果用到了异步函数，则需要调用 <code>done</code>  函数</p>\n<h3 id=\"13-1-vue-的异步测试\"><a href=\"#13-1-vue-的异步测试\" class=\"headerlink\" title=\"13.1 vue 的异步测试\"></a>13.1 vue 的异步测试</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __mocks__/axios.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> undoList = &#123;  <span class=\"attr\">success</span>: <span class=\"literal\">true</span>,  <span class=\"attr\">data</span>: [</span><br><span class=\"line\"> &#123; <span class=\"attr\">status</span>: <span class=\"string\">&quot;div&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;dell&quot;</span> &#125;,</span><br><span class=\"line\"> &#123; <span class=\"attr\">status</span>: <span class=\"string\">&quot;div&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;lee&quot;</span> &#125;</span><br><span class=\"line\">]&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">url</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (url === <span class=\"string\">&quot;/getUndoList.json&quot;</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.success === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     resolve(undoList);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// __tests__/integration/TodoList.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/test-utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; findTestWrapper &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../utils/testUtils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../TodoList&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"> axios.success = <span class=\"literal\">true</span>;</span><br><span class=\"line\"> jest.useFakeTimers(); <span class=\"comment\">// 写在钩子函数中的意义是为了清除统计次数，重新开始，防止上一个测试用例对下一个测试用例产生影响&#125;);</span></span><br><span class=\"line\">it(<span class=\"string\">`1. 用户进入页面时，请求远程测试; 2. 列表应该显示远程返回的数据`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(TodoList, &#123; store &#125;);</span><br><span class=\"line\">  wrapper.vm.$nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">   expect(listItems.length).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">   done();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">it(<span class=\"string\">`1. 用户进入页面时，等待5s; 2. 列表应该显示远程返回的数据`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> wrapper = mount(TodoList, &#123; store &#125;);</span><br><span class=\"line\"> expect(<span class=\"built_in\">setTimeout</span>).toHaveBeenCalledTimes(<span class=\"number\">1</span>); <span class=\"comment\">// 至少执行一次定时器</span></span><br><span class=\"line\"> jest.runAllTimers();</span><br><span class=\"line\"> wrapper.vm.$nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">  expect(listItems.length).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">  done();</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">`1. 用户进入页面时，请求远程数据失败; 2. 列表应该显示空数据，不应该挂掉`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\"> axios.success = <span class=\"literal\">false</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> wrapper = mount(TodoList, &#123; store &#125;);</span><br><span class=\"line\"> expect(<span class=\"built_in\">setTimeout</span>).toHaveBeenCalledTimes(<span class=\"number\">1</span>); <span class=\"comment\">// 至少执行一次定时器</span></span><br><span class=\"line\"> jest.runAllTimers();</span><br><span class=\"line\"> wrapper.vm.$nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">  expect(listItems.length).toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">  done();</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-2-react-的异步测试\"><a href=\"#13-2-react-的异步测试\" class=\"headerlink\" title=\"13.2 react 的异步测试\"></a>13.2 react 的异步测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __mocks__/axios.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> undoList = &#123;</span><br><span class=\"line\">  success: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  data: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">status</span>: <span class=\"string\">&quot;div&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;dell&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">status</span>: <span class=\"string\">&quot;div&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;lee&quot;</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">url</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">&quot;/getUndoList.json&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.success === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">          resolve(undoList);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// __tests__/integration/TodoList.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-redux&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Enzyme, &#123; mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme-adapter-react-16&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../TodoList&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../store/createStore&quot;</span>;</span><br><span class=\"line\">Enzyme.configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter() &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  axios.success = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  jest.useFakeTimers(); <span class=\"comment\">// 写在钩子函数中的意义是为了清除统计次数，重新开始，防止上一个测试用例对下一个测试用例产生影响</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    1. 用户进入页面时，请求远程测试</span></span><br><span class=\"line\"><span class=\"string\">    2. 列表应该显示远程返回的数据</span></span><br><span class=\"line\"><span class=\"string\">`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;TodoList /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  process.nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    wrapper.update();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">    expect(listItems.length).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    1. 用户进入页面时，等待5s</span></span><br><span class=\"line\"><span class=\"string\">    2. 列表应该显示远程返回的数据</span></span><br><span class=\"line\"><span class=\"string\">`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;TodoList /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  expect(<span class=\"built_in\">setTimeout</span>).toHaveBeenCalledTimes(<span class=\"number\">1</span>); <span class=\"comment\">// 至少执行一次定时器</span></span><br><span class=\"line\">  jest.runAllTimers();</span><br><span class=\"line\">  process.nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    wrapper.update(); <span class=\"comment\">// 更新 wrapper 防止取上一次的 wrapper</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">    expect(listItems.length).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  1. 用户进入页面时，请求远程数据失败</span></span><br><span class=\"line\"><span class=\"string\">  2. 列表应该显示空数据，不应该挂掉</span></span><br><span class=\"line\"><span class=\"string\">`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">  axios.success = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;TodoList /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  expect(<span class=\"built_in\">setTimeout</span>).toHaveBeenCalledTimes(<span class=\"number\">1</span>); <span class=\"comment\">// 至少执行一次定时器</span></span><br><span class=\"line\">  jest.runAllTimers();</span><br><span class=\"line\">  process.nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    wrapper.update();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">    expect(listItems.length).toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"14-vue-项目的自动化测试\"><a href=\"#14-vue-项目的自动化测试\" class=\"headerlink\" title=\"14. vue 项目的自动化测试\"></a>14. vue 项目的自动化测试</h2><h3 id=\"14-1-使用传统方式对-vue-组件进行测试\"><a href=\"#14-1-使用传统方式对-vue-组件进行测试\" class=\"headerlink\" title=\"14.1 使用传统方式对 vue 组件进行测试\"></a>14.1 使用传统方式对 vue 组件进行测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HelloWorld.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/components/HelloWorld&quot;</span>;</span><br><span class=\"line\">describe(<span class=\"string\">&quot;HelloWorld.vue&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">&quot;renders props.msg when passed&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">    root.className = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(root);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span></span><br><span class=\"line\">        h(HelloWorld, &#123;</span><br><span class=\"line\">          props: &#123;</span><br><span class=\"line\">            msg: <span class=\"string\">&quot;dell lee&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;).$mount(<span class=\"string\">&quot;.root&quot;</span>);</span><br><span class=\"line\">    expect(<span class=\"built_in\">document</span>.getElementByClassName(<span class=\"string\">&quot;hello&quot;</span>).length).toBe(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>缺点：写法过于复杂，局限性也很大，部分属性无法进行测试</p>\n<h3 id=\"14-2-使用-vue-test-utils-对-vue-组件进行测试\"><a href=\"#14-2-使用-vue-test-utils-对-vue-组件进行测试\" class=\"headerlink\" title=\"14.2 使用 @vue/test-utils 对 vue 组件进行测试\"></a>14.2 使用 @vue/test-utils 对 vue 组件进行测试</h3><ul>\n<li><a href=\"https://vue-test-utils.vuejs.org/zh/\">官方文档</a></li>\n</ul>\n<h3 id=\"14-2-1-for-example\"><a href=\"#14-2-1-for-example\" class=\"headerlink\" title=\"14.2.1 for example\"></a>14.2.1 for example</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HelloWorld.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/test-utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/components/HelloWorld&quot;</span>;</span><br><span class=\"line\">describe(<span class=\"string\">&quot;HelloWorld.vue&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">&quot;renders props.msg when passed&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> msg = <span class=\"string\">&quot;dell lee&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = shallowMount(HelloWorld, &#123;</span><br><span class=\"line\">      propsData: &#123; msg &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    expect(wrapper.text()).toMatch(msg);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-2-2-快照测试\"><a href=\"#14-2-2-快照测试\" class=\"headerlink\" title=\"14.2.2 快照测试\"></a>14.2.2 快照测试</h3><p>使用场景: 一般用于测试组件正常渲染，而不测试组件功能时使用。比如对样式和布局的修改做监听</p>\n<p>好处: 可以帮助我们及时发现组件中 <code>dom</code> 结构的变化</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HelloWorld.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/test-utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/components/HelloWorld&quot;</span>;</span><br><span class=\"line\">describe(<span class=\"string\">&quot;HelloWorld.vue 组件渲染正常&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">&quot;renders props.msg when passed&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> msg = <span class=\"string\">&quot;dell lee&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = shallowMount(HelloWorld, &#123;</span><br><span class=\"line\">      propsData: &#123; msg &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    expect(wrapper).toMatchSnapshot();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"15-react-项目的自动化测试\"><a href=\"#15-react-项目的自动化测试\" class=\"headerlink\" title=\"15. react 项目的自动化测试\"></a>15. react 项目的自动化测试</h2><h3 id=\"15-1-使用传统方式对-react-组件进行测试\"><a href=\"#15-1-使用传统方式对-react-组件进行测试\" class=\"headerlink\" title=\"15.1 使用传统方式对 react 组件进行测试\"></a>15.1 使用传统方式对 react 组件进行测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">&quot;render App&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>, div);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> container = div.getElementsByClassName(<span class=\"string\">&quot;App&quot;</span>);</span><br><span class=\"line\">  expect(container.length).toBe(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>缺点：写法过于复杂，局限性也很大，部分属性无法进行测试</p>\n<h3 id=\"15-2-enzyme-的配置和使用\"><a href=\"#15-2-enzyme-的配置和使用\" class=\"headerlink\" title=\"15.2 enzyme 的配置和使用\"></a>15.2 enzyme 的配置和使用</h3><ul>\n<li><a href=\"https://enzymejs.github.io/enzyme/\">官方文档</a></li>\n<li><a href=\"https://github.com/enzymejs/enzyme\">github</a></li>\n<li><a href=\"https://github.com/enzymejs/enzyme-matchers/tree/master/packages/jest-enzyme\">jest-enzyme</a></li>\n</ul>\n<h3 id=\"15-2-1-for-example\"><a href=\"#15-2-1-for-example\" class=\"headerlink\" title=\"15.2.1 for example\"></a>15.2.1 for example</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Enzyme, &#123; shallow &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme-adapter-react-16&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;App&quot;</span>;</span><br><span class=\"line\">Enzyme.configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter() &#125;);</span><br><span class=\"line\">it(<span class=\"string\">&quot;render App&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = shallow(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>);</span><br><span class=\"line\">  expect(wrapper.find(<span class=\"string\">&#x27;[data-test=&quot;App&quot;]&#x27;</span>).length).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>使用自定义 <code>props</code> 可以降低代码耦合度</p>\n<p><code>shallow</code> 适合单元测试，属于浅渲染； <code>mount</code> 适合集成测试，会将当前组件包括其子组件一起渲染</p>\n<p>单元测试时更倾向于使用 <code>api</code> <code>.state()</code> ；集成测试时更倾向于使用 <code>api</code> <code>.prop()</code></p>\n<h3 id=\"15-2-2-快照测试\"><a href=\"#15-2-2-快照测试\" class=\"headerlink\" title=\"15.2.2 快照测试\"></a>15.2.2 快照测试</h3><p>使用场景: 一般用于测试组件正常渲染，而不测试组件功能时使用。比如对样式和布局的修改做监听</p>\n<p>好处: 可以帮助我们及时发现组件中 <code>dom</code> 结构的变化</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Enzyme, &#123; shallow &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme-adapter-react-16&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;App&quot;</span>;</span><br><span class=\"line\">Enzyme.configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter() &#125;);</span><br><span class=\"line\">it(<span class=\"string\">&quot;render App&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = shallow(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>);</span><br><span class=\"line\">  expect(wrapper).toMatchSnapshot();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"16-前端自动化测试的优势\"><a href=\"#16-前端自动化测试的优势\" class=\"headerlink\" title=\"16. 前端自动化测试的优势\"></a>16. 前端自动化测试的优势</h2><ul>\n<li>更好的代码组织，项目的可维护性强</li>\n<li>更少的 <code>Bug</code> 出现概率，尤其是回归测试中的 <code>Bug</code></li>\n<li>修改工程质量差的项目，更加安全</li>\n<li>项目具备潜在的文档特性</li>\n<li>扩展前端的知识面</li>\n</ul>\n<h2 id=\"17-总结重要的点\"><a href=\"#17-总结重要的点\" class=\"headerlink\" title=\"17 总结重要的点\"></a>17 总结重要的点</h2><ol>\n<li><code>BDD</code> 和 <code>TDD</code></li>\n<li>集成测试 和 单元测试</li>\n<li>测试和业务的解耦</li>\n<li>代码测试覆盖率并不代表一定靠谱</li>\n<li>功能性测试 和 <code>UI</code>测试</li>\n<li>测试越独立，隐藏的问题就越多</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>在前端大型项目开发的过程中，自动化测试都是不可缺少的一环。自动化测试不但可以降低 bug 出现的频率，也可让项目更加健壮</p>","more":"<h1 id=\"前端自动化测试\"><a href=\"#前端自动化测试\" class=\"headerlink\" title=\"前端自动化测试\"></a>前端自动化测试</h1><h2 id=\"1-单元测试\"><a href=\"#1-单元测试\" class=\"headerlink\" title=\"1. 单元测试\"></a>1. 单元测试</h2><p>对软件中的最小可测试单元进行检查和验证，在前端一般为一个模块。</p>\n<h3 id=\"1-1-单元测试的优缺点\"><a href=\"#1-1-单元测试的优缺点\" class=\"headerlink\" title=\"1.1 单元测试的优缺点\"></a>1.1 单元测试的优缺点</h3><ol>\n<li>测试覆盖率高</li>\n<li>业务耦合度高</li>\n<li>代码量大</li>\n<li>过于独立</li>\n</ol>\n<h3 id=\"1-2-总结\"><a href=\"#1-2-总结\" class=\"headerlink\" title=\"1.2 总结\"></a>1.2 总结</h3><p>在某些场景下适合适用单元测试，某些场景下不适合适用单元测试</p>\n<h2 id=\"2-集成测试\"><a href=\"#2-集成测试\" class=\"headerlink\" title=\"2. 集成测试\"></a>2. 集成测试</h2><p>又叫组装测试或联合测试，在单元测试的基础上，将所有模块按照设计要求（如根据结构图）组装成为子系统或系统，进行集成测试。</p>\n<h2 id=\"3-jest-中的匹配器\"><a href=\"#3-jest-中的匹配器\" class=\"headerlink\" title=\"3. jest 中的匹配器\"></a>3. jest 中的匹配器</h2><p><a href=\"https://jestjs.io/docs/en/expect\">jest 匹配器官网</a></p>\n<p>修改 <code>jest</code>  默认配置命令 <code>npx jest --init</code></p>\n<h3 id=\"3-1-实时监听测试用例的改变\"><a href=\"#3-1-实时监听测试用例的改变\" class=\"headerlink\" title=\"3.1 实时监听测试用例的改变\"></a>3.1 实时监听测试用例的改变</h3><p><code>jest --watchAll</code> 一旦某个测试用例发生变化，所有的测试用例都将会重新执行</p>\n<p><code>jest --watch</code>  默认进入 <code>o</code>  模式，即只对发生变化的测试用例重新执行</p>\n<h3 id=\"3-2-常用匹配器\"><a href=\"#3-2-常用匹配器\" class=\"headerlink\" title=\"3.2 常用匹配器\"></a>3.2 常用匹配器</h3><h3 id=\"3-2-1-toBe\"><a href=\"#3-2-1-toBe\" class=\"headerlink\" title=\"3.2.1 toBe()\"></a>3.2.1 toBe()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBe的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span> &#125;;</span><br><span class=\"line\">  expect(a).toBe(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ❌ 因为引用类型使用toBe不是全等效果</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBe</code> 匹配器类似于 <code>===</code>。</p>\n<hr>\n<h3 id=\"3-2-2-toEqual\"><a href=\"#3-2-2-toEqual\" class=\"headerlink\" title=\"3.2.2 toEqual()\"></a>3.2.2 toEqual()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toEqual的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span> &#125;;</span><br><span class=\"line\">  expect(a).toBe(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅ 因为toEqual只是对结果的匹配，而不是全等效果</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toEqual</code> 匹配器只是对结果相等与否进行匹配</p>\n<hr>\n<h3 id=\"3-2-3-toBeNull\"><a href=\"#3-2-3-toBeNull\" class=\"headerlink\" title=\"3.2.3 toBeNull()\"></a>3.2.3 toBeNull()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeNull的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  expect(a).toBeNull();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeNull</code> 是对 <code>null</code> 值的匹配</p>\n<hr>\n<h3 id=\"3-2-4-toBeUndefined\"><a href=\"#3-2-4-toBeUndefined\" class=\"headerlink\" title=\"3.2.4 toBeUndefined()\"></a>3.2.4 toBeUndefined()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeUndefined的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  expect(a).toBeUndefined();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeUndefined</code> 是对 <code>undefined</code> 值的匹配</p>\n<hr>\n<h3 id=\"3-2-5-toBeDefined\"><a href=\"#3-2-5-toBeDefined\" class=\"headerlink\" title=\"3.2.5 toBeDefined()\"></a>3.2.5 toBeDefined()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeDefined的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  expect(a).toBeDefined();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeDefined</code> 是对已经定义的值的匹配，若为 <code>undefined</code> 则不通过</p>\n<hr>\n<h3 id=\"3-2-6-toBeTruthy\"><a href=\"#3-2-6-toBeTruthy\" class=\"headerlink\" title=\"3.2.6 toBeTruthy()\"></a>3.2.6 toBeTruthy()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeTruthy的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  expect(a).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 0 =&gt; ❌，因为 toBeTruthy 是对 true 值的匹配</span></span><br><span class=\"line\"><span class=\"comment\">// 1 =&gt; ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeTruthy</code> 是对 <code>true</code> 值的匹配</p>\n<hr>\n<h3 id=\"3-2-7-toBeFalsy\"><a href=\"#3-2-7-toBeFalsy\" class=\"headerlink\" title=\"3.2.7 toBeFalsy()\"></a>3.2.7 toBeFalsy()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeFalsy的匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  expect(a).toBeFalsy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 1 =&gt; ❌</span></span><br><span class=\"line\"><span class=\"comment\">// 0 =&gt; ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeFalsy</code> 是对 <code>false</code> 值的匹配</p>\n<hr>\n<h3 id=\"3-2-8-toBeGreaterThan\"><a href=\"#3-2-8-toBeGreaterThan\" class=\"headerlink\" title=\"3.2.8 toBeGreaterThan()\"></a>3.2.8 toBeGreaterThan()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeGreaterThan匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">  expect(a).toBeGreaterThan(<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeGreaterThan</code> 相当于 <code>&gt;</code></p>\n<hr>\n<h3 id=\"3-2-9-toBeLessThan\"><a href=\"#3-2-9-toBeLessThan\" class=\"headerlink\" title=\"3.2.9 toBeLessThan()\"></a>3.2.9 toBeLessThan()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeLessThan匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">8</span>;</span><br><span class=\"line\">  expect(a).toBeLessThan(<span class=\"number\">9</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeLessThan</code> 相当于 <code>&lt;</code></p>\n<hr>\n<h3 id=\"3-2-10-toBeGreaterThanOrEqual\"><a href=\"#3-2-10-toBeGreaterThanOrEqual\" class=\"headerlink\" title=\"3.2.10 toBeGreaterThanOrEqual()\"></a>3.2.10 toBeGreaterThanOrEqual()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeGreaterThanOrEqual匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">  expect(a).toBeGreaterThanOrEqual(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeGreaterThanOrEqual</code> 相当于 <code>&gt;=</code></p>\n<hr>\n<h3 id=\"3-2-11-toBeLessThanOrEqual\"><a href=\"#3-2-11-toBeLessThanOrEqual\" class=\"headerlink\" title=\"3.2.11 toBeLessThanOrEqual()\"></a>3.2.11 toBeLessThanOrEqual()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeLessThanOrEqual匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> count = <span class=\"number\">10</span>;</span><br><span class=\"line\">  expect(a).toBeLessThanOrEqual(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeLessThanOrEqual</code> 相当于 <code>&lt;=</code></p>\n<hr>\n<h3 id=\"3-2-12-toBeCloseTo\"><a href=\"#3-2-12-toBeCloseTo\" class=\"headerlink\" title=\"3.2.12 toBeCloseTo()\"></a>3.2.12 toBeCloseTo()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toBeCloseTo匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> one = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> two = <span class=\"number\">0.2</span>;</span><br><span class=\"line\">  expect(one + two).toEqual(<span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ❌ 因为浮点精度不同</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试toBeCloseTo匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> one = <span class=\"number\">0.1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> two = <span class=\"number\">0.2</span>;</span><br><span class=\"line\">  expect(one + two).toBeCloseTo(<span class=\"number\">0.3</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toBeCloseTo</code> 为了解决浮点精度不同导致的无法匹配的问题</p>\n<hr>\n<h3 id=\"3-2-13-toMatch\"><a href=\"#3-2-13-toMatch\" class=\"headerlink\" title=\"3.2.13 toMatch()\"></a>3.2.13 toMatch()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toMatch匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&quot;张三、李四、王五&quot;</span>;</span><br><span class=\"line\">  expect(str).toMatch(<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试toMatch匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> str = <span class=\"string\">&quot;张三、李四、王五&quot;</span>;</span><br><span class=\"line\">  expect(str).toMatch(<span class=\"regexp\">/李四/</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br></pre></td></tr></table></figure>\n\n<p><code>toMatch</code> 为字符串包含匹配器，用来匹配字符串中包含的内容，也可传正则表达式</p>\n<hr>\n<h3 id=\"3-2-14-toContain\"><a href=\"#3-2-14-toContain\" class=\"headerlink\" title=\"3.2.14 toContain()\"></a>3.2.14 toContain()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test(<span class=\"string\">&quot;测试toContain匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>, <span class=\"string\">&quot;王五&quot;</span>];</span><br><span class=\"line\">  expect(arr).toContain(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ✅</span></span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试toContain匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> arr = [<span class=\"string\">&quot;张三&quot;</span>, <span class=\"string\">&quot;李四&quot;</span>, <span class=\"string\">&quot;王五&quot;</span>];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr);</span><br><span class=\"line\">  expect(data).toContain(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>toContain</code> 为数据包含匹器，用来匹配数组中包含的项。同时可完全兼容 <code>Set</code> 测试</p>\n<hr>\n<h3 id=\"3-2-15-toHaveLength\"><a href=\"#3-2-15-toHaveLength\" class=\"headerlink\" title=\"3.2.15 toHaveLength()\"></a>3.2.15 toHaveLength()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// functions.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getIntArray</span>(<span class=\"params\">num</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">Number</span>.isInteger(num)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&#x27;&quot;getIntArray&quot;只接受整数类型的参数&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = num; i &lt; len; i++) &#123;</span><br><span class=\"line\">      result.push(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// functions.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getIntArray &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../src/functions&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;getIntArray(3)返回的数组长度应该为3&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(getIntArray(<span class=\"number\">3</span>)).toHaveLength(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>toHaveLength</code>可以很方便的用来测试字符串和数组类型的长度是否满足预期。</p>\n<h3 id=\"3-2-16-toThrow\"><a href=\"#3-2-16-toThrow\" class=\"headerlink\" title=\"3.2.16 toThrow()\"></a>3.2.16 toThrow()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throwNewErrorFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;this is a new error&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试toThrow匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(throwNewErrorFunc).toThrow();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>toThrow</code> 是专门对异常进行处理的匹配器，可以检测一个方法会不会抛出异常</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throwNewErrorFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;this is a new error&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试toThrow匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(throwNewErrorFunc).toThrow(<span class=\"string\">&quot;this is a new error&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以对这个匹配器中加一些字符串，意思就是抛出的异常必须和字符串相对应，如果字符串不匹配，也没办法通过异常测试。</p>\n<hr>\n<h3 id=\"3-2-17-not\"><a href=\"#3-2-17-not\" class=\"headerlink\" title=\"3.2.17 not()\"></a>3.2.17 not()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> throwNewErrorFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;this is a new error&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试not匹配器&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(throwNewErrorFunc).not.toThrow();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>not</code> 匹配器是 <code>jest</code> 中比较特殊的匹配器，意思就是 “相反” 或者说 “取反” .比如上面的例子，我们不希望方法抛出异常，就可以使用<code>not</code> 匹配器。</p>\n<hr>\n<h3 id=\"3-3-异步代码测试方法\"><a href=\"#3-3-异步代码测试方法\" class=\"headerlink\" title=\"3.3 异步代码测试方法\"></a>3.3 异步代码测试方法</h3><h3 id=\"3-3-1-回调函数式\"><a href=\"#3-3-1-回调函数式\" class=\"headerlink\" title=\"3.3.1 回调函数式\"></a>3.3.1 回调函数式</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// fetchData.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</span><br><span class=\"line\">  axios.get(<span class=\"string\">&quot;http://a.jspang.com/jestTest.json&quot;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    fn(res.data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// fetchData.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./fetchData.js&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">  fetchData(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(data).toEqual(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>必须加入一个 <code>done</code> 方法，保证我们的回调已经完成了，这时候我们表示测试完成</p>\n<hr>\n<h3 id=\"3-3-2-直接返回-Promise\"><a href=\"#3-3-2-直接返回-Promise\" class=\"headerlink\" title=\"3.3.2 直接返回 Promise\"></a>3.3.2 直接返回 Promise</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// fetchTwoData.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchTwoData = <span class=\"function\">() =&gt;</span> axios.get(<span class=\"string\">&quot;http://a.jspang.com/jestTest.json&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// fetchTwoData.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchTwoData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./fetchTwoData.js&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchTwoData的测试用例&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> fetchTwoData().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  expect(res.data).toEqual(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>注意要 <code>return</code></p>\n<h3 id=\"3-3-3-不存在的接口\"><a href=\"#3-3-3-不存在的接口\" class=\"headerlink\" title=\"3.3.3 不存在的接口\"></a>3.3.3 不存在的接口</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// fetchData.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">&quot;http://a.jspang.com/jestTest_error.json&quot;</span>); <span class=\"comment\">// 此地址并不存在</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// fetchData.test.js</span></span><br><span class=\"line\"><span class=\"comment\">// 方式1</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect.assertions(<span class=\"number\">1</span>); <span class=\"comment\">// 断言，必须执行一次 expect</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(err.toString().indexOf(<span class=\"string\">&quot;404&quot;</span>) &gt; -<span class=\"number\">1</span>).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式2</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> fetchData().rejects.toThrow();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式3</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  expect().assertions(<span class=\"number\">1</span>); <span class=\"comment\">// 断言，必须执行一次 expect</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    expect(err.toString().indexOf(<span class=\"string\">&quot;404&quot;</span>) &gt; -<span class=\"number\">1</span>).toBe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>因为测试用例使用了 <code>catch</code> 方法，也就是说只有出现异常的时候才会走这个方法，而现在没有出现异常，就不会走这个测试方法，<code>jest</code> 就默认这个用例通过了测试。因此必须要执行断言，即必须让其执行一次即可。</p>\n<h3 id=\"3-3-4-async-await\"><a href=\"#3-3-4-async-await\" class=\"headerlink\" title=\"3.3.4 async/await\"></a>3.3.4 async/await</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// fetchData.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> axios.get(<span class=\"string\">&quot;http://a.jspang.com/jestTest.json&quot;</span>); <span class=\"comment\">// 此地址并不存在&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// fetchData.test.js</span></span><br><span class=\"line\"><span class=\"comment\">// 方式1</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">await</span> expect(fetchData()).resolves.toMatchObject(&#123;</span><br><span class=\"line\">  data: &#123;</span><br><span class=\"line\">   success: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式2</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;fetchData测试&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetchData();</span><br><span class=\"line\"> expect(response.data).toEqual(&#123; <span class=\"attr\">success</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这时候我们的代码使用 <code>async....await...</code> 的形式，这里我们还使用了 <code>resolves</code> 用于把现有对象转换成 <code>Promise</code> 对象，然后使用 <code>jest</code> 中的 <code>toMatchObject</code> 进行匹配对象中的属性。</p>\n<h2 id=\"4-jest-中的四个钩子函数\"><a href=\"#4-jest-中的四个钩子函数\" class=\"headerlink\" title=\"4. jest 中的四个钩子函数\"></a>4. jest 中的四个钩子函数</h2><h3 id=\"4-1-beforeAll\"><a href=\"#4-1-beforeAll\" class=\"headerlink\" title=\"4.1 beforeAll()\"></a>4.1 beforeAll()</h3><p><code>beforeAll()</code>钩子函数的意思是在所有测试用例之前进行执行。</p>\n<h3 id=\"4-2-afterAll\"><a href=\"#4-2-afterAll\" class=\"headerlink\" title=\"4.2 afterAll()\"></a>4.2 afterAll()</h3><p><code>afterAll()</code>钩子函数是在完成所有测试用例之后才执行的函数。</p>\n<h3 id=\"4-3-beforeEach\"><a href=\"#4-3-beforeEach\" class=\"headerlink\" title=\"4.3 beforeEach()\"></a>4.3 beforeEach()</h3><p><code>beforeEach()</code>钩子函数，是在每个测试用例前都会执行一次的钩子函数。</p>\n<h3 id=\"4-4-afterEach\"><a href=\"#4-4-afterEach\" class=\"headerlink\" title=\"4.4 afterEach()\"></a>4.4 afterEach()</h3><p><code>afterEach()</code>钩子函数，是在每次测试用例完成测试之后执行一次的钩子函数。</p>\n<h2 id=\"5-jest-测试用例分组\"><a href=\"#5-jest-测试用例分组\" class=\"headerlink\" title=\"5. jest 测试用例分组\"></a>5. jest 测试用例分组</h2><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// eat.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Eat</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setName</span>(<span class=\"params\">number</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = number === <span class=\"number\">1</span> ? <span class=\"string\">&quot;水饺&quot;</span> : <span class=\"string\">&quot;火锅&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setDesc</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.desc = <span class=\"built_in\">this</span>.user + <span class=\"string\">&quot;描述&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">setMoney</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.money = <span class=\"built_in\">this</span>.name === <span class=\"string\">&quot;水饺&quot;</span> ? <span class=\"number\">80</span> : <span class=\"number\">300</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// eat.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Eat <span class=\"keyword\">from</span> <span class=\"string\">&quot;./eat&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> eat = <span class=\"keyword\">new</span> Eat();</span><br><span class=\"line\">beforeAll(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;开始吃饭&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">afterAll(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;吃完饭了&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">describe(<span class=\"string\">&quot;水饺相关内容&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  test(<span class=\"string\">&quot;测试水饺描述&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    eat.setName(<span class=\"number\">1</span>);</span><br><span class=\"line\">    eat.setDesc();</span><br><span class=\"line\">    expect(eat.desc).toEqual(<span class=\"string\">&quot;水饺描述&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  test(<span class=\"string\">&quot;测试水饺价格&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    eat.setName(<span class=\"number\">1</span>);</span><br><span class=\"line\">    eat.setMoney();</span><br><span class=\"line\">    expect(eat.money).toEqual(<span class=\"number\">80</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">describe(<span class=\"string\">&quot;火锅相关内容&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  test(<span class=\"string\">&quot;测试火锅描述&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    eat.setName(<span class=\"number\">2</span>);</span><br><span class=\"line\">    eat.setDesc();</span><br><span class=\"line\">    expect(eat.desc).toEqual(<span class=\"string\">&quot;火锅描述&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  test(<span class=\"string\">&quot;测试火锅价格&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    eat.setName(<span class=\"number\">2</span>);</span><br><span class=\"line\">    eat.setMoney();</span><br><span class=\"line\">    expect(eat.money).toEqual(<span class=\"number\">300</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-钩子函数的作用域\"><a href=\"#6-钩子函数的作用域\" class=\"headerlink\" title=\"6. 钩子函数的作用域\"></a>6. 钩子函数的作用域</h2><h3 id=\"6-1-钩子函数在父级分组可作用域子集，类似继承\"><a href=\"#6-1-钩子函数在父级分组可作用域子集，类似继承\" class=\"headerlink\" title=\"6.1 钩子函数在父级分组可作用域子集，类似继承\"></a>6.1 钩子函数在父级分组可作用域子集，类似继承</h3><p>即父级作用域下的钩子函数在子作用域下也生效</p>\n<h3 id=\"6-2-钩子函数同级分组作用域互不干扰，各起作用\"><a href=\"#6-2-钩子函数同级分组作用域互不干扰，各起作用\" class=\"headerlink\" title=\"6.2 钩子函数同级分组作用域互不干扰，各起作用\"></a>6.2 钩子函数同级分组作用域互不干扰，各起作用</h3><p>同作用域下将都会执行</p>\n<h3 id=\"6-3-先执行外部的钩子函数，再执行内部的钩子函数\"><a href=\"#6-3-先执行外部的钩子函数，再执行内部的钩子函数\" class=\"headerlink\" title=\"6.3 先执行外部的钩子函数，再执行内部的钩子函数\"></a>6.3 先执行外部的钩子函数，再执行内部的钩子函数</h3><p>优先父级作用域下的钩子函数，其次执行子作用域下的钩子函数</p>\n<h3 id=\"6-4-在进行测试准备的时候，将对应逻辑写到钩子函数\"><a href=\"#6-4-在进行测试准备的时候，将对应逻辑写到钩子函数\" class=\"headerlink\" title=\"6.4 在进行测试准备的时候，将对应逻辑写到钩子函数\"></a>6.4 在进行测试准备的时候，将对应逻辑写到钩子函数</h3><p>如果将对应逻辑写到了非钩子函数的位置，那么将会优先执行，然后才会执行钩子函数</p>\n<h3 id=\"6-5-对单个测试用例的调试\"><a href=\"#6-5-对单个测试用例的调试\" class=\"headerlink\" title=\"6.5 对单个测试用例的调试\"></a>6.5 对单个测试用例的调试</h3><p>当一个测试文件中的测试用例变得越来越多的时候，假如此时我们相对其中某一个测试用例进行调试，那么我们就需要使用 <code>test.only</code></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test.only(<span class=\"string\">&quot;测试用例&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(<span class=\"number\">1</span> + <span class=\"number\">1</span>).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-Jest-中的-Mock\"><a href=\"#7-Jest-中的-Mock\" class=\"headerlink\" title=\"7. Jest 中的 Mock\"></a>7. Jest 中的 Mock</h2><h3 id=\"7-1-作用\"><a href=\"#7-1-作用\" class=\"headerlink\" title=\"7.1 作用\"></a>7.1 作用</h3><h3 id=\"7-1-1-捕获函数的调用和返回结果，以及-this-和调用顺序\"><a href=\"#7-1-1-捕获函数的调用和返回结果，以及-this-和调用顺序\" class=\"headerlink\" title=\"7.1.1 捕获函数的调用和返回结果，以及 this 和调用顺序\"></a>7.1.1 捕获函数的调用和返回结果，以及 <code>this</code> 和调用顺序</h3><h3 id=\"7-1-2-它可以让我们自由的设置返回结果\"><a href=\"#7-1-2-它可以让我们自由的设置返回结果\" class=\"headerlink\" title=\"7.1.2 它可以让我们自由的设置返回结果\"></a>7.1.2 它可以让我们自由的设置返回结果</h3><h3 id=\"7-1-3-改变内部函数的实现\"><a href=\"#7-1-3-改变内部函数的实现\" class=\"headerlink\" title=\"7.1.3 改变内部函数的实现\"></a>7.1.3 改变内部函数的实现</h3><h3 id=\"7-2-判定函数是否被调用\"><a href=\"#7-2-判定函数是否被调用\" class=\"headerlink\" title=\"7.2 判定函数是否被调用\"></a>7.2 判定函数是否被调用</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  callback();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func).toBeCalled(); <span class=\"comment\">// 测试用例被调用</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>jest.fn()</code>  可以帮助我们捕获函数的调用</p>\n<h3 id=\"7-3-jest-fn-mock-calls-判定函数被调用了几次和传递的参数\"><a href=\"#7-3-jest-fn-mock-calls-判定函数被调用了几次和传递的参数\" class=\"headerlink\" title=\"7.3 jest.fn().mock.calls 判定函数被调用了几次和传递的参数\"></a>7.3 jest.fn().mock.calls 判定函数被调用了几次和传递的参数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  callback(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func.mock.calls.length).toBe(<span class=\"number\">2</span>); <span class=\"comment\">// 测试用例被调用2次</span></span><br><span class=\"line\">  expect(func.mock.calls[<span class=\"number\">0</span>]).toEqual([<span class=\"string\">&quot;张三&quot;</span>]); <span class=\"comment\">// 测试用例传递的第一个参数是 &quot;张三&quot;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此处打印 <code>func.mock</code>  将会打印一些常用的方法，可以根据需求进行相应的用例测试</p>\n<h3 id=\"7-4-jest-fn-mockReturnValue-判定函数执行了几次和返回结果\"><a href=\"#7-4-jest-fn-mockReturnValue-判定函数执行了几次和返回结果\" class=\"headerlink\" title=\"7.4 jest.fn().mockReturnValue() 判定函数执行了几次和返回结果\"></a>7.4 jest.fn().mockReturnValue() 判定函数执行了几次和返回结果</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  callback(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  <span class=\"comment\">// func.mockReturnValue(&quot;Common&quot;)</span></span><br><span class=\"line\">  <span class=\"comment\">// 所有模拟返回值都是 &quot;Common&quot;</span></span><br><span class=\"line\">  func.mockReturnValueOnce(<span class=\"string\">&quot;A&quot;</span>); <span class=\"comment\">// 第一次模拟返回值返回 &quot;A&quot;</span></span><br><span class=\"line\">  func.mockReturnValueOnce(<span class=\"string\">&quot;B&quot;</span>); <span class=\"comment\">// 第二次模拟返回值返回 &quot;B&quot;</span></span><br><span class=\"line\">  func.mockReturnValueOnce(<span class=\"string\">&quot;C&quot;</span>); <span class=\"comment\">// 第三次模拟返回值返回 &quot;C&quot;</span></span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">0</span>].value).toBe(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">1</span>].value).toBe(<span class=\"string\">&quot;B&quot;</span>);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">2</span>].value).toBe(<span class=\"string\">&quot;C&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>func.mockReturnValue()</code>  将对所有模拟返回的值生效</p>\n<p><code>func.mockReturnValueOnce()</code>  执行到第几次就对第几个函数的模拟返回值生效</p>\n<p>支持链式调用</p>\n<h3 id=\"7-5-jest-fn-mock-invocationCallOrder-判定函数执行顺序\"><a href=\"#7-5-jest-fn-mock-invocationCallOrder-判定函数执行顺序\" class=\"headerlink\" title=\"7.5 jest.fn().mock.invocationCallOrder 判定函数执行顺序\"></a>7.5 jest.fn().mock.invocationCallOrder 判定函数执行顺序</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  callback(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func.mock.invocationCallOrder).toEqual([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-6-jest-fn-mock-instances-判定函数调用了几次以及-this-指向\"><a href=\"#7-6-jest-fn-mock-instances-判定函数调用了几次以及-this-指向\" class=\"headerlink\" title=\"7.6 jest.fn().mock.instances 判定函数调用了几次以及 this 指向\"></a>7.6 jest.fn().mock.instances 判定函数调用了几次以及 this 指向</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> createObject = <span class=\"function\">(<span class=\"params\">ClassItem</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> ClassItem();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createObject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 createObject&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  createObject(func);</span><br><span class=\"line\">  expect(func.mock.instances).toEqual([mockConstructor&#123;&#125;]); <span class=\"comment\">// 此处的 this 就是 mockConstructor</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-7-jest-fn-mockImplementation-判定函数返回结果和其他逻辑处理\"><a href=\"#7-7-jest-fn-mockImplementation-判定函数返回结果和其他逻辑处理\" class=\"headerlink\" title=\"7.7 jest.fn().mockImplementation() 判定函数返回结果和其他逻辑处理\"></a>7.7 jest.fn().mockImplementation() 判定函数返回结果和其他逻辑处理</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</span><br><span class=\"line\">  callback(<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  <span class=\"comment\">// func.mockImplementation(() =&gt; &quot;hello&quot;); 等价于 jest.fn(() =&gt; &quot;hello&quot;)</span></span><br><span class=\"line\">  <span class=\"comment\">// func.mockImplementation(() =&gt; this); 等价于 jest.fn().mockReturnThis()</span></span><br><span class=\"line\">  func.mockImplementationOnce(<span class=\"function\">() =&gt;</span> <span class=\"string\">&quot;dell&quot;</span>);</span><br><span class=\"line\">  func.mockImplementationOnce(<span class=\"function\">() =&gt;</span> <span class=\"string\">&quot;lee&quot;</span>);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">0</span>].value).toBe(<span class=\"string\">&quot;dell&quot;</span>);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">1</span>].value).toBe(<span class=\"string\">&quot;lee&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>mockImplementation</code>  比 <code>mockReturnValue</code>  更健壮，因为内部可以写一些额外的逻辑</p>\n<h3 id=\"7-8-toBeCalledWith-来判定每次函数调用时的参数\"><a href=\"#7-8-toBeCalledWith-来判定每次函数调用时的参数\" class=\"headerlink\" title=\"7.8 toBeCalledWith() 来判定每次函数调用时的参数\"></a>7.8 toBeCalledWith() 来判定每次函数调用时的参数</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> runCallback = <span class=\"function\">(<span class=\"params\">callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  callback(<span class=\"string\">&quot;ABC&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; runCallback &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 runCallback&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> func = jest.fn();</span><br><span class=\"line\">  runCallback(func);</span><br><span class=\"line\">  expect(func.mock.results[<span class=\"number\">0</span>]).toEqual([<span class=\"string\">&quot;ABC&quot;</span>);</span><br><span class=\"line\">  expect(func).toBeCalledWith(<span class=\"string\">&quot;ABC&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-9-模拟异步请求\"><a href=\"#7-9-模拟异步请求\" class=\"headerlink\" title=\"7.9 模拟异步请求\"></a>7.9 模拟异步请求</h3><p>对于前端来说一般异步接口是测试是否发送了，而不测试后端接口返回的内容，是属于后端自动化测试的内容</p>\n<h3 id=\"7-9-1-通过模拟库的方式来模拟异步测试\"><a href=\"#7-9-1-通过模拟库的方式来模拟异步测试\" class=\"headerlink\" title=\"7.9.1 通过模拟库的方式来模拟异步测试\"></a>7.9.1 通过模拟库的方式来模拟异步测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">&quot;/api&quot;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; getData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">jest.mock(<span class=\"string\">&quot;axios&quot;</span>); <span class=\"comment\">// 对 axios 进行模拟，这样就不会请求真正数据</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 getData&quot;</span>, <span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  axios.get.mockResolvedValue(&#123; <span class=\"attr\">data</span>: <span class=\"string\">&quot;hello&quot;</span> &#125;); <span class=\"comment\">// 使用 axios 请求的时候模拟成功的返回值就是 hello</span></span><br><span class=\"line\">  <span class=\"keyword\">await</span> getData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(data).toBe(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>mockResolvedValue</code> 模拟不限次数</p>\n<p><code>mockResolvedValueOnce</code> 模拟一次，模拟两次就会报错，需再次调用</p>\n<h3 id=\"7-9-2-通过模拟-Promise-方式模拟异步\"><a href=\"#7-9-2-通过模拟-Promise-方式模拟异步\" class=\"headerlink\" title=\"7.9.2 通过模拟 Promise 方式模拟异步\"></a>7.9.2 通过模拟 Promise 方式模拟异步</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">&quot;/&quot;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// __mocks__/demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;function() &#123; return &#x27;123&#x27; &#125;&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\">jest.mock(<span class=\"string\">&quot;./demo&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试fetchData&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"built_in\">eval</span>(data)).toEqual(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// 实现方式3</span></span><br><span class=\"line\"><span class=\"comment\">// 修改jest.config.js 可以自动查找项目内部__mocks__下与要测试文件名字相同的文件做替换</span></span><br><span class=\"line\"><span class=\"comment\">// 等同于 jest.mock(&quot;要测试文件名字相同的__mocks__下的文件&quot;)&#123;  automock: true; &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-9-3-通过修改-jest-config-js-来自动识别mocks下的文件\"><a href=\"#7-9-3-通过修改-jest-config-js-来自动识别mocks下的文件\" class=\"headerlink\" title=\"7.9.3 通过修改 jest.config.js 来自动识别mocks下的文件\"></a>7.9.3 通过修改 jest.config.js 来自动识别<strong>mocks</strong>下的文件</h3><p>修改 <code>jest.config.js</code> 可以自动查找项目内部 <code>__mocks__</code> 下与要测试文件名字相同的文件做替换</p>\n<p>等同于&gt; <code>jest.mock(&quot;要测试文件名字相同的__mocks__下的文件&quot;)</code></p>\n<h3 id=\"7-9-4-使用-jest-unmock-可取消-mock-模拟\"><a href=\"#7-9-4-使用-jest-unmock-可取消-mock-模拟\" class=\"headerlink\" title=\"7.9.4 使用 jest.unmock() 可取消 mock 模拟\"></a>7.9.4 使用 jest.unmock() 可取消 mock 模拟</h3><h3 id=\"7-9-5-解决测试文件中部分功能不需要-mock，部分功能需要-mock-模拟异步的问题\"><a href=\"#7-9-5-解决测试文件中部分功能不需要-mock，部分功能需要-mock-模拟异步的问题\" class=\"headerlink\" title=\"7.9.5 解决测试文件中部分功能不需要 mock，部分功能需要 mock 模拟异步的问题\"></a>7.9.5 解决测试文件中部分功能不需要 mock，部分功能需要 mock 模拟异步的问题</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> axios.get(<span class=\"string\">&quot;/&quot;</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.data);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> getNumber = <span class=\"function\">() =&gt;</span> <span class=\"number\">123</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// __mocks__/demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fetchData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;function() &#123; return &#x27;123&#x27; &#125;&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\">jest.mock(<span class=\"string\">&quot;./demo&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; fetchData &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; getNumber &#125; = jest.requireActual(<span class=\"string\">&quot;./demo&quot;</span>); <span class=\"comment\">// 引入真实文件</span></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 fetchData&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fetchData().then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    expect(<span class=\"built_in\">eval</span>(data)).toEqual(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 getNumber&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(getNumber()).toEqual(<span class=\"number\">123</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-snapshot-快照测试\"><a href=\"#8-snapshot-快照测试\" class=\"headerlink\" title=\"8. snapshot 快照测试\"></a>8. snapshot 快照测试</h2><p>常用于测试配置文件</p>\n<h3 id=\"8-1-toMatchSnapshot\"><a href=\"#8-1-toMatchSnapshot\" class=\"headerlink\" title=\"8.1 toMatchSnapshot()\"></a>8.1 toMatchSnapshot()</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> generateConfig = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    server: <span class=\"string\">&quot;http://localhost&quot;</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    domain: <span class=\"string\">&quot;localhost&quot;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; generateConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 generateConfig&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(generateConfig()).toMatchSnapshot(); <span class=\"comment\">// 将会在项目里生成快照文件</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>如果要确认更新快照，需要在控制台选择。 <code>u</code>  代表对所有快照进行更新， <code>i</code>  代表对单个确认的快照进行更新</p>\n<h3 id=\"8-2-测试部分可变变量的内容\"><a href=\"#8-2-测试部分可变变量的内容\" class=\"headerlink\" title=\"8.2 测试部分可变变量的内容\"></a>8.2 测试部分可变变量的内容</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> generateConfig = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    server: <span class=\"string\">&quot;http://localhost&quot;</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    domain: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">    <span class=\"comment\">// 可变变量</span></span><br><span class=\"line\">    random: <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">    <span class=\"comment\">// 可变变量</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; generateConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 generateConfig&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  expect(generateConfig()).toMatchSnapshot(&#123;</span><br><span class=\"line\">    time: expect.any(<span class=\"built_in\">Date</span>),</span><br><span class=\"line\">    random: expect.any(<span class=\"built_in\">Number</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-行内的-snapshot\"><a href=\"#8-3-行内的-snapshot\" class=\"headerlink\" title=\"8.3 行内的 snapshot\"></a>8.3 行内的 snapshot</h3><p><code>npm install prettier --save</code></p>\n<p>可以快照放到行内的测试用例中</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// demo.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> generateConfig = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    server: <span class=\"string\">&quot;http://localhost&quot;</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    domain: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    time: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span><br><span class=\"line\">    <span class=\"comment\">// 可变变量</span></span><br><span class=\"line\">    random: <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">    <span class=\"comment\">// 可变变量</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// demo.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; generateConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./demo&quot;</span>;</span><br><span class=\"line\">test(<span class=\"string\">&quot;测试 generateConfig&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// toMatchInlineSnapshot 可以快照放到行内的测试用例中</span></span><br><span class=\"line\">  expect(generateConfig()).toMatchInlineSnapshot(&#123;</span><br><span class=\"line\">    time: expect.any(<span class=\"built_in\">Date</span>),</span><br><span class=\"line\">    random: expect.any(<span class=\"built_in\">Number</span>)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"9-Test-Driven-Development-TDD-测试驱动开发\"><a href=\"#9-Test-Driven-Development-TDD-测试驱动开发\" class=\"headerlink\" title=\"9. Test Driven Development(TDD) 测试驱动开发\"></a>9. Test Driven Development(TDD) 测试驱动开发</h2><h3 id=\"9-1-TDD-开发流程\"><a href=\"#9-1-TDD-开发流程\" class=\"headerlink\" title=\"9.1 TDD 开发流程\"></a>9.1 TDD 开发流程</h3><ol>\n<li>编写测试用例（知道功能，先写测试用例）</li>\n<li>运行测试，测试用例无法通过测试</li>\n<li>编写代码，使测试用例通过测试</li>\n<li>优化代码， 完成开发</li>\n<li>新增功能，重复执行 1-4</li>\n</ol>\n<h3 id=\"9-2-TDD-的优势\"><a href=\"#9-2-TDD-的优势\" class=\"headerlink\" title=\"9.2 TDD 的优势\"></a>9.2 TDD 的优势</h3><ol>\n<li>长期减少项目的回归 bug（减少修改代码产生的 bug）</li>\n<li>代码质量更好（组织，可维护性好）</li>\n<li>测试覆盖率高（因为是先编写测试用例，但测试覆盖率过高会影响很大精力）</li>\n<li>错误测试代码不容易出现</li>\n</ol>\n<h3 id=\"9-3-TDD-的适用场景\"><a href=\"#9-3-TDD-的适用场景\" class=\"headerlink\" title=\"9.3 TDD 的适用场景\"></a>9.3 TDD 的适用场景</h3><ol>\n<li>不适用于开发业务代码时使用（开发业务代码时会大量的与业务代码产生耦合，加大工作量）</li>\n<li>适用于一些库的开发（开发库时代码耦合度较低，通常只处理函数等相关功能）</li>\n</ol>\n<hr>\n<h2 id=\"10-Behavior-Driven-Development-BDD-行为驱动开发\"><a href=\"#10-Behavior-Driven-Development-BDD-行为驱动开发\" class=\"headerlink\" title=\"10. Behavior Driven Development(BDD) 行为驱动开发\"></a>10. Behavior Driven Development(BDD) 行为驱动开发</h2><h3 id=\"10-1-BDD-开发流程\"><a href=\"#10-1-BDD-开发流程\" class=\"headerlink\" title=\"10.1 BDD 开发流程\"></a>10.1 BDD 开发流程</h3><ol>\n<li>先编写业务代码，不关心测试</li>\n<li>思考并描述用户行为</li>\n<li>根据用户行为模拟测试</li>\n</ol>\n<h3 id=\"10-2-vue-example\"><a href=\"#10-2-vue-example\" class=\"headerlink\" title=\"10.2 vue example\"></a>10.2 vue example</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// testUtils.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> findTestWrapper = <span class=\"function\">(<span class=\"params\">wrapper, tag</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapper.find(<span class=\"string\">`[data-test=&quot;<span class=\"subst\">$&#123;tag&#125;</span>&quot;]`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __tests__/integration/TodoList.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/test-utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; findTestWrapper &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../utils/testUtils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../TodoList&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import store from &quot;../../../../store&quot;</span></span><br><span class=\"line\">it(<span class=\"string\">`    </span></span><br><span class=\"line\"><span class=\"string\"> 新增内容逻辑的集成测试    </span></span><br><span class=\"line\"><span class=\"string\"> 1. 用户会在header输入框输入内容    </span></span><br><span class=\"line\"><span class=\"string\"> 2. 用户会点击回车按钮  </span></span><br><span class=\"line\"><span class=\"string\"> 3. 列表项应该增加用户输入内容的列表项`</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(TodoList);</span><br><span class=\"line\">  <span class=\"comment\">// const wrapper = mount(TodoList, &#123; store &#125;)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果使用 vuex，也几乎无改动</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputElem = findTestWrapper(wrapper, <span class=\"string\">&quot;header-input&quot;</span>).at(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = <span class=\"string\">&quot;Dell lee&quot;</span>;</span><br><span class=\"line\">  inputElem.setValue(content);</span><br><span class=\"line\">  inputElem.trigger(<span class=\"string\">&quot;change&quot;</span>);</span><br><span class=\"line\">  inputElem.trigger(<span class=\"string\">&quot;keyup.enter&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>).at(<span class=\"number\">0</span>);</span><br><span class=\"line\">  expect(listItems.length).toBe(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect(listItems.at(<span class=\"number\">0</span>).text()).toContain(content);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-3-react-example\"><a href=\"#10-3-react-example\" class=\"headerlink\" title=\"10.3 react example\"></a>10.3 react example</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// testUtils.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> findTestWrapper = <span class=\"function\">(<span class=\"params\">wrapper, tag</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapper.find(<span class=\"string\">`[data-test=&quot;<span class=\"subst\">$&#123;tag&#125;</span>&quot;]`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __tests__/integration/TodoList.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import &#123; Provider &#125; from &quot;react-redux&quot;;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Enzyme, &#123; mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme-adapter-react-16&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../TodoList&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import store from &quot;../../../../store/createStore&quot;;</span></span><br><span class=\"line\">Enzyme.configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter() &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    新增内容逻辑的集成测试</span></span><br><span class=\"line\"><span class=\"string\">    1. 用户会在header输入框输入内容</span></span><br><span class=\"line\"><span class=\"string\">    2. 用户会点击回车按钮</span></span><br><span class=\"line\"><span class=\"string\">   3. 列表项应该增加用户输入内容的列表项</span></span><br><span class=\"line\"><span class=\"string\">`</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">TodoList</span> /&gt;</span></span>);</span><br><span class=\"line\">  <span class=\"comment\">/** </span></span><br><span class=\"line\"><span class=\"comment\">  const wrapper = mount(</span></span><br><span class=\"line\"><span class=\"comment\">   &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class=\"line\"><span class=\"comment\">    &lt;TodoList /&gt;&lt;/Provider&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   &lt;/Provider&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  )  </span></span><br><span class=\"line\"><span class=\"comment\">  // 如果使用 redux，也几乎无改动</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> inputElem = findTestWrapper(wrapper, <span class=\"string\">&quot;header-input&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = <span class=\"string\">&quot;Dell lee&quot;</span>;</span><br><span class=\"line\">  inputElem.simulate(<span class=\"string\">&quot;change&quot;</span>, &#123; <span class=\"attr\">target</span>: &#123; <span class=\"attr\">value</span>: content &#125; &#125;);</span><br><span class=\"line\">  inputElem.simulate(<span class=\"string\">&quot;keyUp&quot;</span>, &#123; <span class=\"attr\">keyCode</span>: <span class=\"number\">13</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">  expect(listItems.length).toBe(<span class=\"number\">1</span>);</span><br><span class=\"line\">  expect(listItems.text()).toContain(content);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"11-TDD-和-BDD-的对比\"><a href=\"#11-TDD-和-BDD-的对比\" class=\"headerlink\" title=\"11. TDD 和 BDD 的对比\"></a>11. TDD 和 BDD 的对比</h2><ol>\n<li><code>TDD</code> 先写测试后写代码; <code>BDD</code> 先写代码后写测试</li>\n<li><code>TDD</code> 创建的是 <code>unit</code> 单元测试文件夹，一般结合单元测试，属于白盒测试(知道实现测试代码); <code>BDD</code> 创建的是 <code>integration</code> 集成测试文件夹，一般结合集成测试，属于黑盒测试(不知道实现测试代码)</li>\n<li><code>TDD</code> 测试重点在代码; <code>BDD</code> 测试重点在 <code>UI</code> ( <code>DOM</code>)</li>\n<li><code>TDD</code> 安全感低(无法保证各个组件拼撞到一起是否不会有问题); <code>BDD</code> 安全感高</li>\n<li><code>TDD</code> 速度快; <code>BDD</code> 速度慢</li>\n</ol>\n<hr>\n<h2 id=\"12-TDD-与-BDD-混用\"><a href=\"#12-TDD-与-BDD-混用\" class=\"headerlink\" title=\"12. TDD 与 BDD 混用\"></a>12. TDD 与 BDD 混用</h2><h3 id=\"12-1-对一些工具函数的测试\"><a href=\"#12-1-对一些工具函数的测试\" class=\"headerlink\" title=\"12.1 对一些工具函数的测试\"></a>12.1 对一些工具函数的测试</h3><h3 id=\"12-2-对-vuex-的-store-进行测试\"><a href=\"#12-2-对-vuex-的-store-进行测试\" class=\"headerlink\" title=\"12.2 对 vuex 的 store 进行测试\"></a>12.2 对 vuex 的 store 进行测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __tests__/unit/store.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../store&quot;</span>;</span><br><span class=\"line\">it(<span class=\"string\">&quot;当 store 接受 changeInputValue 的 commit 时, inputValue 发生变化&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">  store.commit(<span class=\"string\">&quot;changeInputValue&quot;</span>, value);</span><br><span class=\"line\">  expect(store.state.inputValue).toBe(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-3-对-redux-的-store-进行测试\"><a href=\"#12-3-对-redux-的-store-进行测试\" class=\"headerlink\" title=\"12.3 对 redux 的 store 进行测试\"></a>12.3 对 redux 的 store 进行测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __tests__/unit/store.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../store/createStore&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; changeInputValue &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../store/actions&quot;</span>;</span><br><span class=\"line\">it(<span class=\"string\">&quot;当 store 接受 changeInputValue 的 dispatch 时, inputValue 发生变化&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> value = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">/**   </span></span><br><span class=\"line\"><span class=\"comment\">  const changeInputValue = (payload) =&gt; (&#123; </span></span><br><span class=\"line\"><span class=\"comment\">   type: CHANGE_IMPUT_VALUE, payload </span></span><br><span class=\"line\"><span class=\"comment\">  &#125;)   </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">  store.dispatch(changeInputValue(value));</span><br><span class=\"line\">  expect(store.getState().inputValue).toBe(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"13-异步测试\"><a href=\"#13-异步测试\" class=\"headerlink\" title=\"13. 异步测试\"></a>13. 异步测试</h2><p>注意：异步测试如果用到了异步函数，则需要调用 <code>done</code>  函数</p>\n<h3 id=\"13-1-vue-的异步测试\"><a href=\"#13-1-vue-的异步测试\" class=\"headerlink\" title=\"13.1 vue 的异步测试\"></a>13.1 vue 的异步测试</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __mocks__/axios.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> undoList = &#123;  <span class=\"attr\">success</span>: <span class=\"literal\">true</span>,  <span class=\"attr\">data</span>: [</span><br><span class=\"line\"> &#123; <span class=\"attr\">status</span>: <span class=\"string\">&quot;div&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;dell&quot;</span> &#125;,</span><br><span class=\"line\"> &#123; <span class=\"attr\">status</span>: <span class=\"string\">&quot;div&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;lee&quot;</span> &#125;</span><br><span class=\"line\">]&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\"> <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">url</span>)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (url === <span class=\"string\">&quot;/getUndoList.json&quot;</span>) &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.success === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">     resolve(undoList);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// __tests__/integration/TodoList.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/test-utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; findTestWrapper &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../utils/testUtils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../TodoList&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"> axios.success = <span class=\"literal\">true</span>;</span><br><span class=\"line\"> jest.useFakeTimers(); <span class=\"comment\">// 写在钩子函数中的意义是为了清除统计次数，重新开始，防止上一个测试用例对下一个测试用例产生影响&#125;);</span></span><br><span class=\"line\">it(<span class=\"string\">`1. 用户进入页面时，请求远程测试; 2. 列表应该显示远程返回的数据`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(TodoList, &#123; store &#125;);</span><br><span class=\"line\">  wrapper.vm.$nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">   expect(listItems.length).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">   done();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">it(<span class=\"string\">`1. 用户进入页面时，等待5s; 2. 列表应该显示远程返回的数据`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> wrapper = mount(TodoList, &#123; store &#125;);</span><br><span class=\"line\"> expect(<span class=\"built_in\">setTimeout</span>).toHaveBeenCalledTimes(<span class=\"number\">1</span>); <span class=\"comment\">// 至少执行一次定时器</span></span><br><span class=\"line\"> jest.runAllTimers();</span><br><span class=\"line\"> wrapper.vm.$nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">  expect(listItems.length).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">  done();</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">`1. 用户进入页面时，请求远程数据失败; 2. 列表应该显示空数据，不应该挂掉`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\"> axios.success = <span class=\"literal\">false</span>;</span><br><span class=\"line\"> <span class=\"keyword\">const</span> wrapper = mount(TodoList, &#123; store &#125;);</span><br><span class=\"line\"> expect(<span class=\"built_in\">setTimeout</span>).toHaveBeenCalledTimes(<span class=\"number\">1</span>); <span class=\"comment\">// 至少执行一次定时器</span></span><br><span class=\"line\"> jest.runAllTimers();</span><br><span class=\"line\"> wrapper.vm.$nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">  expect(listItems.length).toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">  done();</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-2-react-的异步测试\"><a href=\"#13-2-react-的异步测试\" class=\"headerlink\" title=\"13.2 react 的异步测试\"></a>13.2 react 的异步测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// __mocks__/axios.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> undoList = &#123;</span><br><span class=\"line\">  success: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  data: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">status</span>: <span class=\"string\">&quot;div&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;dell&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">status</span>: <span class=\"string\">&quot;div&quot;</span>, <span class=\"attr\">value</span>: <span class=\"string\">&quot;lee&quot;</span> &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">url</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (url === <span class=\"string\">&quot;/getUndoList.json&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.success === <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">          resolve(undoList);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/// __tests__/integration/TodoList.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-redux&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Enzyme, &#123; mount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme-adapter-react-16&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> TodoList <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../TodoList&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;../../../../store/createStore&quot;</span>;</span><br><span class=\"line\">Enzyme.configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter() &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">beforeEach(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  axios.success = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  jest.useFakeTimers(); <span class=\"comment\">// 写在钩子函数中的意义是为了清除统计次数，重新开始，防止上一个测试用例对下一个测试用例产生影响</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    1. 用户进入页面时，请求远程测试</span></span><br><span class=\"line\"><span class=\"string\">    2. 列表应该显示远程返回的数据</span></span><br><span class=\"line\"><span class=\"string\">`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;TodoList /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  process.nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    wrapper.update();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">    expect(listItems.length).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    1. 用户进入页面时，等待5s</span></span><br><span class=\"line\"><span class=\"string\">    2. 列表应该显示远程返回的数据</span></span><br><span class=\"line\"><span class=\"string\">`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;TodoList /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  expect(<span class=\"built_in\">setTimeout</span>).toHaveBeenCalledTimes(<span class=\"number\">1</span>); <span class=\"comment\">// 至少执行一次定时器</span></span><br><span class=\"line\">  jest.runAllTimers();</span><br><span class=\"line\">  process.nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    wrapper.update(); <span class=\"comment\">// 更新 wrapper 防止取上一次的 wrapper</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">    expect(listItems.length).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  1. 用户进入页面时，请求远程数据失败</span></span><br><span class=\"line\"><span class=\"string\">  2. 列表应该显示空数据，不应该挂掉</span></span><br><span class=\"line\"><span class=\"string\">`</span>, <span class=\"function\"><span class=\"params\">done</span> =&gt;</span> &#123;</span><br><span class=\"line\">  axios.success = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = mount(</span><br><span class=\"line\">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class=\"line\">      &lt;TodoList /&gt;</span><br><span class=\"line\">    &lt;/Provider&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">  expect(<span class=\"built_in\">setTimeout</span>).toHaveBeenCalledTimes(<span class=\"number\">1</span>); <span class=\"comment\">// 至少执行一次定时器</span></span><br><span class=\"line\">  jest.runAllTimers();</span><br><span class=\"line\">  process.nickTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    wrapper.update();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> listItems = findTestWrapper(wrapper, <span class=\"string\">&quot;list-item&quot;</span>);</span><br><span class=\"line\">    expect(listItems.length).toBe(<span class=\"number\">0</span>);</span><br><span class=\"line\">    done();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"14-vue-项目的自动化测试\"><a href=\"#14-vue-项目的自动化测试\" class=\"headerlink\" title=\"14. vue 项目的自动化测试\"></a>14. vue 项目的自动化测试</h2><h3 id=\"14-1-使用传统方式对-vue-组件进行测试\"><a href=\"#14-1-使用传统方式对-vue-组件进行测试\" class=\"headerlink\" title=\"14.1 使用传统方式对 vue 组件进行测试\"></a>14.1 使用传统方式对 vue 组件进行测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HelloWorld.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/components/HelloWorld&quot;</span>;</span><br><span class=\"line\">describe(<span class=\"string\">&quot;HelloWorld.vue&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">&quot;renders props.msg when passed&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> root = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">    root.className = <span class=\"string\">&quot;root&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.body.appendChild(root);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">      render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span></span><br><span class=\"line\">        h(HelloWorld, &#123;</span><br><span class=\"line\">          props: &#123;</span><br><span class=\"line\">            msg: <span class=\"string\">&quot;dell lee&quot;</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;).$mount(<span class=\"string\">&quot;.root&quot;</span>);</span><br><span class=\"line\">    expect(<span class=\"built_in\">document</span>.getElementByClassName(<span class=\"string\">&quot;hello&quot;</span>).length).toBe(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>缺点：写法过于复杂，局限性也很大，部分属性无法进行测试</p>\n<h3 id=\"14-2-使用-vue-test-utils-对-vue-组件进行测试\"><a href=\"#14-2-使用-vue-test-utils-对-vue-组件进行测试\" class=\"headerlink\" title=\"14.2 使用 @vue/test-utils 对 vue 组件进行测试\"></a>14.2 使用 @vue/test-utils 对 vue 组件进行测试</h3><ul>\n<li><a href=\"https://vue-test-utils.vuejs.org/zh/\">官方文档</a></li>\n</ul>\n<h3 id=\"14-2-1-for-example\"><a href=\"#14-2-1-for-example\" class=\"headerlink\" title=\"14.2.1 for example\"></a>14.2.1 for example</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HelloWorld.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/test-utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/components/HelloWorld&quot;</span>;</span><br><span class=\"line\">describe(<span class=\"string\">&quot;HelloWorld.vue&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">&quot;renders props.msg when passed&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> msg = <span class=\"string\">&quot;dell lee&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = shallowMount(HelloWorld, &#123;</span><br><span class=\"line\">      propsData: &#123; msg &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    expect(wrapper.text()).toMatch(msg);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-2-2-快照测试\"><a href=\"#14-2-2-快照测试\" class=\"headerlink\" title=\"14.2.2 快照测试\"></a>14.2.2 快照测试</h3><p>使用场景: 一般用于测试组件正常渲染，而不测试组件功能时使用。比如对样式和布局的修改做监听</p>\n<p>好处: 可以帮助我们及时发现组件中 <code>dom</code> 结构的变化</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HelloWorld.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shallowMount &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vue/test-utils&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> HelloWorld <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/components/HelloWorld&quot;</span>;</span><br><span class=\"line\">describe(<span class=\"string\">&quot;HelloWorld.vue 组件渲染正常&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">&quot;renders props.msg when passed&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> msg = <span class=\"string\">&quot;dell lee&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> wrapper = shallowMount(HelloWorld, &#123;</span><br><span class=\"line\">      propsData: &#123; msg &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    expect(wrapper).toMatchSnapshot();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"15-react-项目的自动化测试\"><a href=\"#15-react-项目的自动化测试\" class=\"headerlink\" title=\"15. react 项目的自动化测试\"></a>15. react 项目的自动化测试</h2><h3 id=\"15-1-使用传统方式对-react-组件进行测试\"><a href=\"#15-1-使用传统方式对-react-组件进行测试\" class=\"headerlink\" title=\"15.1 使用传统方式对 react 组件进行测试\"></a>15.1 使用传统方式对 react 组件进行测试</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">it(<span class=\"string\">&quot;render App&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>, div);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> container = div.getElementsByClassName(<span class=\"string\">&quot;App&quot;</span>);</span><br><span class=\"line\">  expect(container.length).toBe(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>缺点：写法过于复杂，局限性也很大，部分属性无法进行测试</p>\n<h3 id=\"15-2-enzyme-的配置和使用\"><a href=\"#15-2-enzyme-的配置和使用\" class=\"headerlink\" title=\"15.2 enzyme 的配置和使用\"></a>15.2 enzyme 的配置和使用</h3><ul>\n<li><a href=\"https://enzymejs.github.io/enzyme/\">官方文档</a></li>\n<li><a href=\"https://github.com/enzymejs/enzyme\">github</a></li>\n<li><a href=\"https://github.com/enzymejs/enzyme-matchers/tree/master/packages/jest-enzyme\">jest-enzyme</a></li>\n</ul>\n<h3 id=\"15-2-1-for-example\"><a href=\"#15-2-1-for-example\" class=\"headerlink\" title=\"15.2.1 for example\"></a>15.2.1 for example</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Enzyme, &#123; shallow &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme-adapter-react-16&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;App&quot;</span>;</span><br><span class=\"line\">Enzyme.configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter() &#125;);</span><br><span class=\"line\">it(<span class=\"string\">&quot;render App&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = shallow(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>);</span><br><span class=\"line\">  expect(wrapper.find(<span class=\"string\">&#x27;[data-test=&quot;App&quot;]&#x27;</span>).length).toBe(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>使用自定义 <code>props</code> 可以降低代码耦合度</p>\n<p><code>shallow</code> 适合单元测试，属于浅渲染； <code>mount</code> 适合集成测试，会将当前组件包括其子组件一起渲染</p>\n<p>单元测试时更倾向于使用 <code>api</code> <code>.state()</code> ；集成测试时更倾向于使用 <code>api</code> <code>.prop()</code></p>\n<h3 id=\"15-2-2-快照测试\"><a href=\"#15-2-2-快照测试\" class=\"headerlink\" title=\"15.2.2 快照测试\"></a>15.2.2 快照测试</h3><p>使用场景: 一般用于测试组件正常渲染，而不测试组件功能时使用。比如对样式和布局的修改做监听</p>\n<p>好处: 可以帮助我们及时发现组件中 <code>dom</code> 结构的变化</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// App.test.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Enzyme, &#123; shallow &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Adapter <span class=\"keyword\">from</span> <span class=\"string\">&quot;enzyme-adapter-react-16&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;App&quot;</span>;</span><br><span class=\"line\">Enzyme.configure(&#123; <span class=\"attr\">adapter</span>: <span class=\"keyword\">new</span> Adapter() &#125;);</span><br><span class=\"line\">it(<span class=\"string\">&quot;render App&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrapper = shallow(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>);</span><br><span class=\"line\">  expect(wrapper).toMatchSnapshot();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"16-前端自动化测试的优势\"><a href=\"#16-前端自动化测试的优势\" class=\"headerlink\" title=\"16. 前端自动化测试的优势\"></a>16. 前端自动化测试的优势</h2><ul>\n<li>更好的代码组织，项目的可维护性强</li>\n<li>更少的 <code>Bug</code> 出现概率，尤其是回归测试中的 <code>Bug</code></li>\n<li>修改工程质量差的项目，更加安全</li>\n<li>项目具备潜在的文档特性</li>\n<li>扩展前端的知识面</li>\n</ul>\n<h2 id=\"17-总结重要的点\"><a href=\"#17-总结重要的点\" class=\"headerlink\" title=\"17 总结重要的点\"></a>17 总结重要的点</h2><ol>\n<li><code>BDD</code> 和 <code>TDD</code></li>\n<li>集成测试 和 单元测试</li>\n<li>测试和业务的解耦</li>\n<li>代码测试覆盖率并不代表一定靠谱</li>\n<li>功能性测试 和 <code>UI</code>测试</li>\n<li>测试越独立，隐藏的问题就越多</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckn5ujhh30000eh7ygegd1dl5","category_id":"ckn5ujmrl0002eh7ybp53eay6","_id":"ckn5ujmrl0003eh7ybikv38v5"}],"PostTag":[{"post_id":"ckn5ujhh30000eh7ygegd1dl5","tag_id":"ckn5un4me0004eh7y4869hbh6","_id":"ckn5un4mf0005eh7y5tj61ajf"}],"Tag":[{"name":"测试","_id":"ckn5un4me0004eh7y4869hbh6"}]}}